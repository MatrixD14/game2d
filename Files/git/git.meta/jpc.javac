class git extends Component { //[I-S]LN=0;[I-E]
  @Order(idx = -2) //[I-S]LN=1;[I-E]
  public String linkNamePasth; // "name do usuario do github/ nome do repositorio -->  usuario/repositorio" //[I-S]LN=2;[I-E]
 //[I-S]LN=3;[I-E]
  @Order(idx = -1) //[I-S]LN=4;[I-E]
  public String pasth; // "caminho da pasta" //[I-S]LN=5;[I-E]
 //[I-S]LN=6;[I-E]
  @Order(idx = 1) //[I-S]LN=7;[I-E]
  public String Commit = "comito"; // "menssagem ou etiqueta da modificação do arquivo" //[I-S]LN=8;[I-E]
 //[I-S]LN=9;[I-E]
  @Order(idx = 2) //[I-S]LN=10;[I-E]
  public String toke; // "codigo toke do github" //[I-S]LN=11;[I-E]
 //[I-S]LN=12;[I-E]
  private String Dir; //[I-S]LN=13;[I-E]
 //[I-S]LN=14;[I-E]
  private gitClone gitclone = new gitClone(); //[I-S]LN=15;[I-E]
  private gitPush gitpush = new gitPush(); //[I-S]LN=16;[I-E]
  private gitPushMult gitpushmult = new gitPushMult(); //[I-S]LN=17;[I-E]
  private gitCloneMult gitclonemult = new gitCloneMult(); //[I-S]LN=18;[I-E]
 //[I-S]LN=19;[I-E]
  @Order(idx = 0) //[I-S]LN=20;[I-E]
  public PropertiesButton DownLoad = //[I-S]LN=21;[I-E]
      new PropertiesButton( //[I-S]LN=22;[I-E]
          new PropertiesButtonListener() { //[I-S]LN=23;[I-E]
            void onClicked() { //[I-S]LN=24;[I-E]
              DownLoad(); //[I-S]LN=25;[I-E]
            } //[I-S]LN=26;[I-E]
          }); //[I-S]LN=27;[I-E]
 //[I-S]LN=28;[I-E]
  @Order(idx = 3) //[I-S]LN=29;[I-E]
  public PropertiesButton UpLoad = //[I-S]LN=30;[I-E]
      new PropertiesButton( //[I-S]LN=31;[I-E]
          new PropertiesButtonListener() { //[I-S]LN=32;[I-E]
            void onClicked() { //[I-S]LN=33;[I-E]
              UpLoad(); //[I-S]LN=34;[I-E]
            } //[I-S]LN=35;[I-E]
          }); //[I-S]LN=36;[I-E]
 //[I-S]LN=37;[I-E]
  public void DownLoad() { //[I-S]LN=38;[I-E]
    boolean onoffFile = false; //[I-S]LN=39;[I-E]
    if (pasth.contains(".")) onoffFile = true; //[I-S]LN=40;[I-E]
    if (!verifica(false, false)) return; //[I-S]LN=41;[I-E]
    if (onoffFile) { //[I-S]LN=42;[I-E]
      String DownloadUrl = "https://raw.githubusercontent.com/" + linkNamePasth + "/main/Files/" + pasth; //[I-S]LN=43;[I-E]
      gitclone.GitClone(DownloadUrl, Dir); //[I-S]LN=44;[I-E]
 //[I-S]LN=45;[I-E]
      StringBuilder InforDate = new StringBuilder(); //[I-S]LN=46;[I-E]
      InforDate.append("{\n \"pasth\": \"").append(Dir).append("\",\n \"NameFile\": \"").append(pasth).append("\",\n \"Link\": \"").append(DownloadUrl).append("\"\n}"); //[I-S]LN=47;[I-E]
      Console.log(InforDate.toString()); //[I-S]LN=48;[I-E]
    } else { //[I-S]LN=49;[I-E]
        String DownloadUrl = "https://api.github.com/repos/" + linkNamePasth + "/contents/Files/" + pasth + "?ref=main"; //[I-S]LN=50;[I-E]
        File dir = new File(Dir); //[I-S]LN=51;[I-E]
        gitclonemult.gitPasthAll(gitclone,dir,DownloadUrl,toke); //[I-S]LN=52;[I-E]
      Console.log("test"); //[I-S]LN=53;[I-E]
    } //[I-S]LN=54;[I-E]
  }  //[I-S]LN=55;[I-E]
 //[I-S]LN=56;[I-E]
  public void UpLoad() { //[I-S]LN=57;[I-E]
    boolean onoffFile = false; //[I-S]LN=58;[I-E]
    if (pasth.contains(".")) onoffFile = true; //[I-S]LN=59;[I-E]
    if (onoffFile && verifica(true, true)) { //[I-S]LN=60;[I-E]
      String API_Url = "https://api.github.com/repos/" + linkNamePasth + "/contents/Files/" + pasth + "?ref=main"; //[I-S]LN=61;[I-E]
      // busca o sha do file //[I-S]LN=62;[I-E]
 //[I-S]LN=63;[I-E]
      String shas = gitpush.getSha(API_Url, toke); //[I-S]LN=64;[I-E]
      gitpush.GitPush(API_Url, Commit, Dir, toke, shas); //[I-S]LN=65;[I-E]
 //[I-S]LN=66;[I-E]
      Console.log(!shas.isEmpty() ? "update" : "create"); //[I-S]LN=67;[I-E]
      Console.log("Link: " + API_Url); //[I-S]LN=68;[I-E]
    } else if (verifica(true, false)) { //[I-S]LN=69;[I-E]
      File dir = new File(Dir); //[I-S]LN=70;[I-E]
      if (dir == null || !dir.exists()) return; //[I-S]LN=71;[I-E]
 //[I-S]LN=72;[I-E]
      // "lista todos oa file que existe" //[I-S]LN=73;[I-E]
      gitpushmult.UpVariaPasth(gitpush, dir, dir.getAbsolutePath() + "", linkNamePasth, Commit, pasth, toke); //[I-S]LN=74;[I-E]
    } //[I-S]LN=75;[I-E]
  } //[I-S]LN=76;[I-E]
 //[I-S]LN=77;[I-E]
  public boolean verifica(boolean token, boolean pont) { //[I-S]LN=78;[I-E]
    if (!linkNamePasth.contains("/") || linkNamePasth.isEmpty()) { //[I-S]LN=79;[I-E]
      Toast.showText("esta errado o link do \"nome do usuario do git\" / nome do repositorio", 1); //[I-S]LN=80;[I-E]
      return false; //[I-S]LN=81;[I-E]
    } //[I-S]LN=82;[I-E]
    if (pasth == null || pasth.isEmpty() || (pont && !new File(Directories.getProjectFolder() + "/Files/" + pasth).isFile())) { //[I-S]LN=83;[I-E]
      Toast.showText("caminho para o arquivo esta faltando ou errado", 1); //[I-S]LN=84;[I-E]
      return false; //[I-S]LN=85;[I-E]
    } //[I-S]LN=86;[I-E]
    if (token && (toke == null || toke.length() < 20)) { //[I-S]LN=87;[I-E]
      Toast.showText("o toke esta vazio ou faltando", 1); //[I-S]LN=88;[I-E]
      return false; //[I-S]LN=89;[I-E]
    } //[I-S]LN=90;[I-E]
 //[I-S]LN=91;[I-E]
    Dir = Directories.getProjectFolder() + "Files/" + pasth; //[I-S]LN=92;[I-E]
    return true; //[I-S]LN=93;[I-E]
  } //[I-S]LN=94;[I-E]
} //[I-S]LN=95;[I-E]