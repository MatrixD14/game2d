package JAVARuntime;

import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import java.util.zip.*;
import java.text.*;
import java.net.*;
import java.math.*;
import java.io.*;
import java.nio.*;
import java.time.*;
import java.time.chrono.*;
import java.time.format.*;
import java.time.temporal.*;
import java.time.zone.*;



public class _JContainer{}

//C-R:moveVision
class moveVision extends Component { //[I-S]LN=0;[I-E]
  private Vector2 vision, visionMouse, joy; //[I-S]LN=1;[I-E]
  private Characterbody charac = null; //[I-S]LN=2;[I-E]
  private float speedJ = 3, speedS = 20f * Time.deltaTime(), camv, camh; //[I-S]LN=3;[I-E]
  public float x, y; //[I-S]LN=4;[I-E]
  private onoffinvent open; //[I-S]LN=5;[I-E]
 //[I-S]LN=6;[I-E]
public   void start() { //[I-S]LN=7;[I-E]
    open = WorldController.findObject("player").findComponent("onoffinvent"); //[I-S]LN=8;[I-E]
    charac = myObject.getPhysics().getPhysicsEntity(); //[I-S]LN=9;[I-E]
    joy = Input.getAxisValue("joy"); //[I-S]LN=10;[I-E]
    vision = Input.getAxisValue("vision"); //[I-S]LN=11;[I-E]
  } //[I-S]LN=12;[I-E]
 //[I-S]LN=13;[I-E]
public   void repeat() { //[I-S]LN=14;[I-E]
    if (open.onoff) { //[I-S]LN=15;[I-E]
      move(0, 0); //[I-S]LN=16;[I-E]
      return; //[I-S]LN=17;[I-E]
    } //[I-S]LN=18;[I-E]
    visionMouse = new Vector2(Input.mouse.getSlideX(), Input.mouse.getSlideY()); //[I-S]LN=19;[I-E]
    x = Input.mouse.getSlideX(); //[I-S]LN=20;[I-E]
    y = Input.mouse.getSlideY(); //[I-S]LN=21;[I-E]
    if (key("w") || key("s") || key("a") || key("d")) { //[I-S]LN=22;[I-E]
      movekey(); //[I-S]LN=23;[I-E]
} else move(joy.getX() * speedJ, joy.getY() * speedJ); //[I-S]LN=24;[I-E]
 //[I-S]LN=25;[I-E]
/*    if (Input.mouse.isConnected() && !Input.getTouch(0).isPressed()) { //[I-S]LN=26;[I-E]
      vision(x < -20 && x > 20 ? 0 : x * speedS, y < -5 && y > 5 ? 0 : y * speedS); //[I-S]LN=27;[I-E]
    } else */ //[I-S]LN=28;[I-E]
vision(vision.getX() * speedS, vision.getY() * speedS); //[I-S]LN=29;[I-E]
  }  //[I-S]LN=30;[I-E]
 //[I-S]LN=31;[I-E]
  private void movekey() { //[I-S]LN=32;[I-E]
    float x = 0, y = 0; //[I-S]LN=33;[I-E]
    if (key("w")) y = +1; //[I-S]LN=34;[I-E]
    if (key("s")) y = -1; //[I-S]LN=35;[I-E]
    if (key("a")) x = -1; //[I-S]LN=36;[I-E]
    if (key("d")) x = +1; //[I-S]LN=37;[I-E]
    move(x * speedJ, y * speedJ); //[I-S]LN=38;[I-E]
  } //[I-S]LN=39;[I-E]
 //[I-S]LN=40;[I-E]
  private boolean key(String key) { //[I-S]LN=41;[I-E]
    if (Input.keyboard.isKeyPressed(key)) return true; //[I-S]LN=42;[I-E]
    return false; //[I-S]LN=43;[I-E]
  } //[I-S]LN=44;[I-E]
 //[I-S]LN=45;[I-E]
  private void move(float x, float y) { //[I-S]LN=46;[I-E]
    charac.setSpeed(-x, y); //[I-S]LN=47;[I-E]
  } //[I-S]LN=48;[I-E]
 //[I-S]LN=49;[I-E]
  private void vision(float x, float y) { //[I-S]LN=50;[I-E]
    camh = Math.clamp(-80, camh += y, 45); //[I-S]LN=51;[I-E]
    myObject.findChildObject("vision").getRotation().selfLookTo(new Vector3(0, Math.sin(-camh), Math.cos(-camh))); //[I-S]LN=52;[I-E]
    camv += x; //[I-S]LN=53;[I-E]
    myObject.getRotation().selfLookTo(new Vector3(Math.sin(-camv), 0, Math.cos(-camv))); //[I-S]LN=54;[I-E]
  } //[I-S]LN=55;[I-E]
} //[I-S]LN=56;[I-E]
//C-R:test
class test extends Component { //[I-S]LN=0;[I-E]
  public SpatialObject s; //[I-S]LN=1;[I-E]
  public ObjectFile[] f = new ObjectFile[5]; //[I-S]LN=2;[I-E]
 //[I-S]LN=3;[I-E]
public   void repeat() { //[I-S]LN=4;[I-E]
    if (Input.isKeyDown("invent") || Input.keyboard.isKeyDown("r")) { //[I-S]LN=5;[I-E]
SpatialObject Object = myObject.instantiate(f[Random.range(0, f.length - 1)], new Vector3(range(s.getScale().getX()), -0.5f, range(s.getScale().getZ()))); //[I-S]LN=6;[I-E]
      item value = Object.findComponent("item"); //[I-S]LN=7;[I-E]
      if(value == null) return; //[I-S]LN=8;[I-E]
      if(StringOperations.equals(Object.getName() ,  "galho"))value.logica = new arma(new espada()); //[I-S]LN=9;[I-E]
      if(StringOperations.equals(Object.getName() ,  "troco"))value.logica = new arma(new espada()); //[I-S]LN=10;[I-E]
   }  //[I-S]LN=11;[I-E]
  } //[I-S]LN=12;[I-E]
 //[I-S]LN=13;[I-E]
  private float range(float value) { //[I-S]LN=14;[I-E]
    return Random.range(-value / 10, value / 10); //[I-S]LN=15;[I-E]
  } //[I-S]LN=16;[I-E]
} //[I-S]LN=17;[I-E]
//C-R:item
class item extends Component { //[I-S]LN=0;[I-E]
  public final Map<String, Texture> SpriteCach = new HashMap<String, Texture>(); //[I-S]LN=1;[I-E]
  public String name, typeDC; //[I-S]LN=2;[I-E]
  public Texture ui; //[I-S]LN=3;[I-E]
  private Texture Spait; //[I-S]LN=4;[I-E]
  public VertexFile vertex; //[I-S]LN=5;[I-E]
  public int value, QuatItemGrup, maxgrup; //[I-S]LN=6;[I-E]
  public int MapSpriteX, MapSpriteY; //[I-S]LN=7;[I-E]
  private int altura = 32, largura = 32; //[I-S]LN=8;[I-E]
  public atributo logica; //[I-S]LN=9;[I-E]
  public item() { //[I-S]LN=10;[I-E]
    super(); //[I-S]LN=11;[I-E]
  } //[I-S]LN=12;[I-E]
 //[I-S]LN=13;[I-E]
  public item(String name, String typeDC, Texture ui, VertexFile vertex, int value, int QuatItemGrup, int maxgrup, int MapSpriteX, int MapSpriteY, atributo logica) { //[I-S]LN=14;[I-E]
    super(); //[I-S]LN=15;[I-E]
    this.name = name; //[I-S]LN=16;[I-E]
    this.typeDC = typeDC; //[I-S]LN=17;[I-E]
    this.ui = ui; //[I-S]LN=18;[I-E]
    this.vertex = vertex; //[I-S]LN=19;[I-E]
    this.value = value; //[I-S]LN=20;[I-E]
    this.QuatItemGrup = QuatItemGrup; //[I-S]LN=21;[I-E]
    this.maxgrup = maxgrup; //[I-S]LN=22;[I-E]
    this.MapSpriteX = MapSpriteX; //[I-S]LN=23;[I-E]
    this.MapSpriteY = MapSpriteY; //[I-S]LN=24;[I-E]
    this.Spait = getSpait(); //[I-S]LN=25;[I-E]
    this.logica = logica; //[I-S]LN=26;[I-E]
  } //[I-S]LN=27;[I-E]
 //[I-S]LN=28;[I-E]
  public Texture getSpait() { //[I-S]LN=29;[I-E]
    if (ui == null) return null; //[I-S]LN=30;[I-E]
    if (Spait == null) Spait = Atlas(); //[I-S]LN=31;[I-E]
    return Spait; //[I-S]LN=32;[I-E]
  } //[I-S]LN=33;[I-E]
 //[I-S]LN=34;[I-E]
  public void Usando() { //[I-S]LN=35;[I-E]
    if (logica != null) logica.Used(this); //[I-S]LN=36;[I-E]
  } //[I-S]LN=37;[I-E]
 //[I-S]LN=38;[I-E]
  public void NoUsando() { //[I-S]LN=39;[I-E]
    if (logica != null) logica.NoUsed(this); //[I-S]LN=40;[I-E]
  } //[I-S]LN=41;[I-E]
   //[I-S]LN=42;[I-E]
  public Texture Atlas() {    //[I-S]LN=43;[I-E]
    if (ui == null) return null; //[I-S]LN=44;[I-E]
    String key = name + "_" + MapSpriteX + "_" + MapSpriteY; //[I-S]LN=45;[I-E]
    Texture cach = SpriteCach.get(key); //[I-S]LN=46;[I-E]
    if (cach != null) return cach; //[I-S]LN=47;[I-E]
 //[I-S]LN=48;[I-E]
    Texture mapSprite = new Texture(largura, altura, true); //[I-S]LN=49;[I-E]
    int spaitx = largura * MapSpriteX; //[I-S]LN=50;[I-E]
    int spaity = altura * MapSpriteY; //[I-S]LN=51;[I-E]
 //[I-S]LN=52;[I-E]
    for (int x = 0; x < largura; x++) { //[I-S]LN=53;[I-E]
      int uiX = x + spaitx; //[I-S]LN=54;[I-E]
      for (int y = 0; y < altura; y++) { //[I-S]LN=55;[I-E]
        int uiY = y + spaity; //[I-S]LN=56;[I-E]
        Color corMap = ui.get(uiX, uiY); //[I-S]LN=57;[I-E]
        mapSprite.setPixel(x, y, corMap); //[I-S]LN=58;[I-E]
      } //[I-S]LN=59;[I-E]
    } //[I-S]LN=60;[I-E]
    mapSprite.apply(); //[I-S]LN=61;[I-E]
    SpriteCach.put(key, mapSprite); //[I-S]LN=62;[I-E]
    return mapSprite; //[I-S]LN=63;[I-E]
  } //[I-S]LN=64;[I-E]
} //[I-S]LN=65;[I-E]
//C-R:invertore
class invertore extends Component { //[I-S]LN=0;[I-E]
  private List<SpatialObject> Item = new ArrayList<SpatialObject>(); //[I-S]LN=1;[I-E]
  @Hide public List<item> items = new ArrayList<item>(); //[I-S]LN=2;[I-E]
  @Hide public SUIImage[] spait = new SUIImage[30]; //[I-S]LN=3;[I-E]
  @Hide public SUIText[] cont = new SUIText[30]; //[I-S]LN=4;[I-E]
  @Hide public int[] slotAlmout; //[I-S]LN=5;[I-E]
  private SpatialObject button; //[I-S]LN=6;[I-E]
  private boolean onoff = false; //[I-S]LN=7;[I-E]
  @Hide public SUIText infor; //[I-S]LN=8;[I-E]
  private float time = 0; //[I-S]LN=9;[I-E]
 //[I-S]LN=10;[I-E]
public   void start() { //[I-S]LN=11;[I-E]
    button = WorldController.findObject("colete"); //[I-S]LN=12;[I-E]
    infor = WorldController.findObject("HUD").findComponent("suitext"); //[I-S]LN=13;[I-E]
    slotAlmout = new int[cont.length]; //[I-S]LN=14;[I-E]
    slot(); //[I-S]LN=15;[I-E]
    for (int i = 0; i < cont.length; i++) { //[I-S]LN=16;[I-E]
      items.add(i, null); //[I-S]LN=17;[I-E]
      if (cont[i] != null) cont[i].setText(""); //[I-S]LN=18;[I-E]
      if (spait[i] != null) { //[I-S]LN=19;[I-E]
        spait[i].setColor(new Color(0, 0, 0, 0)); //[I-S]LN=20;[I-E]
        spait[i].setImage(null); //[I-S]LN=21;[I-E]
      } //[I-S]LN=22;[I-E]
    } //[I-S]LN=23;[I-E]
  } //[I-S]LN=24;[I-E]
 //[I-S]LN=25;[I-E]
public   void repeat() { //[I-S]LN=26;[I-E]
    if (time < 1) time += 0.01f; //[I-S]LN=27;[I-E]
    laser(); //[I-S]LN=28;[I-E]
    button.setEnabled(onoff); //[I-S]LN=29;[I-E]
  } //[I-S]LN=30;[I-E]
 //[I-S]LN=31;[I-E]
  private void slot() { //[I-S]LN=32;[I-E]
    for (int i = 0; i < 30; i++) { //[I-S]LN=33;[I-E]
      String obj = i < 5 ? "slotH" + (i + 1) : i < 20 ? "slot" + (i - 4) : i < 29 ? "slotCria" + (i - 19) : "output"; //[I-S]LN=34;[I-E]
      String child = i < 5 ? "spait" + (i + 1) : i < 20 ? "item" + (i - 4) : i < 29 ? "item" + (i - 19) : "outputCria"; //[I-S]LN=35;[I-E]
      Item.add(i, WorldController.findObject(obj).findChildObject(child)); //[I-S]LN=36;[I-E]
      cont[i] = Item.get(i).findComponent("suitext"); //[I-S]LN=37;[I-E]
      spait[i] = Item.get(i).findComponent("suiimage"); //[I-S]LN=38;[I-E]
    } //[I-S]LN=39;[I-E]
  } //[I-S]LN=40;[I-E]
 //[I-S]LN=41;[I-E]
  private void laser() { //[I-S]LN=42;[I-E]
      SpatialObject camera = WorldController.findObject("vision"); //[I-S]LN=43;[I-E]
LaserHit hit = new Laser().trace(camera.getGlobalPosition(), camera.forward(), 6f); //[I-S]LN=44;[I-E]
if (hit == null || !"object".equals(hit.getObject().getTag())) { //[I-S]LN=45;[I-E]
      onoff = false; //[I-S]LN=46;[I-E]
      infor.setText(""); //[I-S]LN=47;[I-E]
      return; //[I-S]LN=48;[I-E]
    } //[I-S]LN=49;[I-E]
    item objecthit = hit.getObject().findComponent("item"); //[I-S]LN=50;[I-E]
    String spaceTxt = "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclica em coleta "; //[I-S]LN=51;[I-E]
    infor.setText(spaceTxt + objecthit.QuatItemGrup + objecthit.name + ", " + objecthit.typeDC + ": " + objecthit.value); //[I-S]LN=52;[I-E]
    onoff = true; //[I-S]LN=53;[I-E]
    if ((!Input.isKeyPressed("coleta") && !Input.keyboard.isKeyDown("e")) || time < 0.45f) return; //[I-S]LN=54;[I-E]
    for (int i = 0; i < (items.size() - 7); i++) { //[I-S]LN=55;[I-E]
      if (items.get(i) == null || (items.get(i) != null && items.get(i).name.equals(objecthit.name))) { //[I-S]LN=56;[I-E]
        int spaceVoid = objecthit.maxgrup - slotAlmout[i]; //[I-S]LN=57;[I-E]
        if (spaceVoid >= objecthit.QuatItemGrup) { //[I-S]LN=58;[I-E]
          addItem(objecthit, i); //[I-S]LN=59;[I-E]
          hit.getObject().destroy(); //[I-S]LN=60;[I-E]
          onoff = false; //[I-S]LN=61;[I-E]
          time = 0; //[I-S]LN=62;[I-E]
          break; //[I-S]LN=63;[I-E]
        }  //[I-S]LN=64;[I-E]
      } //[I-S]LN=65;[I-E]
    } //[I-S]LN=66;[I-E]
  } //[I-S]LN=67;[I-E]
 //[I-S]LN=68;[I-E]
  public void addItem(item additem, int i) { //[I-S]LN=69;[I-E]
    slotAlmout[i] += additem.QuatItemGrup; //[I-S]LN=70;[I-E]
    int valuesoma = slotAlmout[i]; //[I-S]LN=71;[I-E]
    items.set(i, additem); //[I-S]LN=72;[I-E]
    if (cont[i] == null) return; //[I-S]LN=73;[I-E]
    cont[i].setText(valuesoma > 0 ? String.valueOf(valuesoma) : "1"); //[I-S]LN=74;[I-E]
    if (i >= spait.length) return; //[I-S]LN=75;[I-E]
    spait[i].setImage(additem.getSpait()); //[I-S]LN=76;[I-E]
    spait[i].setColor(new Color()); //[I-S]LN=77;[I-E]
  } //[I-S]LN=78;[I-E]
} //[I-S]LN=79;[I-E]
//C-R:selectslot
class selectslot extends Component { //[I-S]LN=0;[I-E]
  private List<SpatialObject> objslot = new ArrayList<SpatialObject>(); //[I-S]LN=1;[I-E]
  private List<Key> keys = new ArrayList<Key>(); //[I-S]LN=2;[I-E]
  private SUIImage[] slot = new SUIImage[30]; //[I-S]LN=3;[I-E]
  private SUIText name; //[I-S]LN=4;[I-E]
  private SpatialObject paineldados, player; //[I-S]LN=5;[I-E]
  private int select = -1, trocaslot = -1; //[I-S]LN=6;[I-E]
  private invertore invent; //[I-S]LN=7;[I-E]
  private float clicktime = 0; //[I-S]LN=8;[I-E]
  private int contclick = 0; //[I-S]LN=9;[I-E]
  private SpatialObject Object; //[I-S]LN=10;[I-E]
  private onoffinvent OpenExit; //[I-S]LN=11;[I-E]
  private Color White, Black, Transparent, BlueWhite; //[I-S]LN=12;[I-E]
  public ObjectFile drops; //[I-S]LN=13;[I-E]
 //[I-S]LN=14;[I-E]
public   void start() { //[I-S]LN=15;[I-E]
    White = new Color(255, 255, 255); //[I-S]LN=16;[I-E]
    Black = new Color(0, 0, 0); //[I-S]LN=17;[I-E]
    Transparent = new Color(0, 0, 0, 0); //[I-S]LN=18;[I-E]
    BlueWhite = new Color(0, 255, 255); //[I-S]LN=19;[I-E]
     //[I-S]LN=20;[I-E]
    player = WorldController.findObject("player"); //[I-S]LN=21;[I-E]
    Object = WorldController.findObject("object"); //[I-S]LN=22;[I-E]
    paineldados = WorldController.findObject("information"); //[I-S]LN=23;[I-E]
    name = paineldados.findComponent("suitext"); //[I-S]LN=24;[I-E]
    invent = myObject.findComponent("invertore"); //[I-S]LN=25;[I-E]
    OpenExit = player.findComponent("onoffinvent"); //[I-S]LN=26;[I-E]
    addslot(); //[I-S]LN=27;[I-E]
    name.setText(""); //[I-S]LN=28;[I-E]
    paineldados.setEnabled(false); //[I-S]LN=29;[I-E]
  } //[I-S]LN=30;[I-E]
 //[I-S]LN=31;[I-E]
public   void repeat() { //[I-S]LN=32;[I-E]
    if (clicktime < 5) clicktime += 0.01f; //[I-S]LN=33;[I-E]
    select(); //[I-S]LN=34;[I-E]
    upslot(); //[I-S]LN=35;[I-E]
    if (Input.isKeyDown("invent") || Input.keyboard.isKeyDown("r")) { //[I-S]LN=36;[I-E]
      if (select > 4) select = -1; //[I-S]LN=37;[I-E]
      paineldados.setEnabled(false); //[I-S]LN=38;[I-E]
    } //[I-S]LN=39;[I-E]
    if (!OpenExit.onoff && trocaslot != -1) { //[I-S]LN=40;[I-E]
      paineldados.setEnabled(false); //[I-S]LN=41;[I-E]
      trocaslot = -1; //[I-S]LN=42;[I-E]
      select = -1; //[I-S]LN=43;[I-E]
    } //[I-S]LN=44;[I-E]
  } //[I-S]LN=45;[I-E]
 //[I-S]LN=46;[I-E]
  private void addslot() { //[I-S]LN=47;[I-E]
    for (int i = 0; i < slot.length; i++) { //[I-S]LN=48;[I-E]
      String objpai = i < 5 ? "hotbar" : i < 20 ? "backgroud" : "backgroudCria"; //[I-S]LN=49;[I-E]
      String objcompot = i < 5 ? "slotH" + (i + 1) : i < 20 ? "slot" + (i - 4) : i < 29 ? "slotCria" + (i - 19) : "output"; //[I-S]LN=50;[I-E]
      objslot.add(WorldController.findObject(objpai).findChildObject(objcompot)); //[I-S]LN=51;[I-E]
    } //[I-S]LN=52;[I-E]
    for (int i = 0; i < slot.length; i++) { //[I-S]LN=53;[I-E]
      objslot.get(i).addComponent(new SUIKeyEventListener()); //[I-S]LN=54;[I-E]
      SUIKeyEventListener key = objslot.get(i).findComponent("SUIKeyEventListener"); //[I-S]LN=55;[I-E]
      key.setKeyName(i < 5 ? "slotH" + (i + 1) : i < 29 ? "item" + (i - 4) : "output"); //[I-S]LN=56;[I-E]
      if (slot[i] != null && keys.get(i) != null) continue; //[I-S]LN=57;[I-E]
      slot[i] = objslot.get(i).findComponent("suiimage"); //[I-S]LN=58;[I-E]
      keys.add(Input.getKey(i < 5 ? "slotH" + (i + 1) : i < 29 ? "item" + (i - 4) : "output")); //[I-S]LN=59;[I-E]
    } //[I-S]LN=60;[I-E]
  } //[I-S]LN=61;[I-E]
 //[I-S]LN=62;[I-E]
  private void select() { //[I-S]LN=63;[I-E]
    for (int i = 0; i < slot.length; i++) { //[I-S]LN=64;[I-E]
      if (keys.get(i).isDown()) { //[I-S]LN=65;[I-E]
        UseNoUse(false, select); //[I-S]LN=66;[I-E]
        if (select == i) { //[I-S]LN=67;[I-E]
          select = -1; //[I-S]LN=68;[I-E]
          offonObj("", false, i); //[I-S]LN=69;[I-E]
          modvalue(-1); //[I-S]LN=70;[I-E]
        } else { //[I-S]LN=71;[I-E]
          if (invent.items.get(i) != null && invent.items.get(i).name != null) { //[I-S]LN=72;[I-E]
            item dodasitem = invent.items.get(i); //[I-S]LN=73;[I-E]
            String dados = "\n  name: " + dodasitem.name + "\n  " + dodasitem.typeDC + ": " + dodasitem.value; //[I-S]LN=74;[I-E]
            offonObj(dados, true, i); //[I-S]LN=75;[I-E]
          } else { //[I-S]LN=76;[I-E]
            offonObj("", false, i); //[I-S]LN=77;[I-E]
          } //[I-S]LN=78;[I-E]
          select = i; //[I-S]LN=79;[I-E]
        } //[I-S]LN=80;[I-E]
        break; //[I-S]LN=81;[I-E]
      } //[I-S]LN=82;[I-E]
    } //[I-S]LN=83;[I-E]
  } //[I-S]LN=84;[I-E]
 //[I-S]LN=85;[I-E]
  private void offonObj(String value, boolean onoff, int i) { //[I-S]LN=86;[I-E]
    name.setText(value); //[I-S]LN=87;[I-E]
    if (OpenExit.onoff) paineldados.setEnabled(onoff); //[I-S]LN=88;[I-E]
    boolean hotbar = i >= 0 && i < 5; //[I-S]LN=89;[I-E]
    Object.setEnabled(onoff && hotbar); //[I-S]LN=90;[I-E]
    UseNoUse(onoff, i); //[I-S]LN=91;[I-E]
    ModelRenderer texture = Object.findComponent("modelrenderer"); //[I-S]LN=92;[I-E]
    if (texture == null || invent.items.get(i) == null) return; //[I-S]LN=93;[I-E]
    texture.setModelFile(invent.items.get(i).vertex); //[I-S]LN=94;[I-E]
  } //[I-S]LN=95;[I-E]
 //[I-S]LN=96;[I-E]
  private void UseNoUse(boolean yesNo, int is) { //[I-S]LN=97;[I-E]
    if (is >= 0 && invent.items.get(is) != null && invent.items.get(is).logica != null) { //[I-S]LN=98;[I-E]
      item dodasitem = invent.items.get(is); //[I-S]LN=99;[I-E]
      if (!Input.isKeyDown("output") && yesNo) dodasitem.Usando(); //[I-S]LN=100;[I-E]
      else dodasitem.NoUsando(); //[I-S]LN=101;[I-E]
    } //[I-S]LN=102;[I-E]
  } //[I-S]LN=103;[I-E]
 //[I-S]LN=104;[I-E]
  private void upslot() { //[I-S]LN=105;[I-E]
    for (int i = 0; i < slot.length; i++) { //[I-S]LN=106;[I-E]
      if (keys.get(i).isDown() && OpenExit.onoff) { //[I-S]LN=107;[I-E]
          if (contclick == i && clicktime < 0.1f) { //[I-S]LN=108;[I-E]
            modvalue(trocaslot == i ? -1 : i); //[I-S]LN=109;[I-E]
          } else { //[I-S]LN=110;[I-E]
            contclick = i; //[I-S]LN=111;[I-E]
            clicktime = 0; //[I-S]LN=112;[I-E]
          } //[I-S]LN=113;[I-E]
 //[I-S]LN=114;[I-E]
          if (slot[i] == null) continue; //[I-S]LN=115;[I-E]
          if (trocaslot != -1 && trocaslot != i && trocaslot <= invent.items.size()) { //[I-S]LN=116;[I-E]
            item watslot = invent.items.get(i); //[I-S]LN=117;[I-E]
            item seleslot = invent.items.get(trocaslot); //[I-S]LN=118;[I-E]
            if (watslot != null && seleslot != null && watslot.name != null && watslot.name.equals(seleslot.name)) { //[I-S]LN=119;[I-E]
              int limita = watslot.maxgrup; //[I-S]LN=120;[I-E]
              int space = limita - invent.slotAlmout[i]; //[I-S]LN=121;[I-E]
              // ele so ajunta quando o dois slot tenho quantidade pequena ele uni em um so //[I-S]LN=122;[I-E]
              if (space > 0) { //[I-S]LN=123;[I-E]
                int tranfere = Math.min(invent.slotAlmout[trocaslot], space); //[I-S]LN=124;[I-E]
                invent.slotAlmout[i] += tranfere; //[I-S]LN=125;[I-E]
                invent.slotAlmout[trocaslot] -= tranfere; //[I-S]LN=126;[I-E]
                invent.cont[i].setText(invent.slotAlmout[i] > 0 ? String.valueOf(invent.slotAlmout[i]) : ""); //[I-S]LN=127;[I-E]
                invent.cont[trocaslot].setText(invent.slotAlmout[trocaslot] > 0 ? String.valueOf(invent.slotAlmout[trocaslot]) : ""); //[I-S]LN=128;[I-E]
                if (invent.slotAlmout[trocaslot] <= 0) { //[I-S]LN=129;[I-E]
                  invent.items.set(trocaslot, null); //[I-S]LN=130;[I-E]
                  invent.spait[trocaslot].setImage(null); //[I-S]LN=131;[I-E]
                  invent.spait[trocaslot].setColor(Transparent); //[I-S]LN=132;[I-E]
                  invent.cont[trocaslot].setText(""); //[I-S]LN=133;[I-E]
                } //[I-S]LN=134;[I-E]
              } //[I-S]LN=135;[I-E]
            } else { //[I-S]LN=136;[I-E]
              int watvalue = invent.slotAlmout[i]; //[I-S]LN=137;[I-E]
              int muditem = invent.slotAlmout[trocaslot]; //[I-S]LN=138;[I-E]
              invent.slotAlmout[trocaslot] = watvalue; //[I-S]LN=139;[I-E]
              invent.slotAlmout[i] = muditem; //[I-S]LN=140;[I-E]
              tocaslot(i, muditem, seleslot); //[I-S]LN=141;[I-E]
              tocaslot(trocaslot, watvalue, watslot); //[I-S]LN=142;[I-E]
            } //[I-S]LN=143;[I-E]
            select = -1; //[I-S]LN=144;[I-E]
            modvalue(-1); //[I-S]LN=145;[I-E]
          } //[I-S]LN=146;[I-E]
          break; //[I-S]LN=147;[I-E]
        } //[I-S]LN=148;[I-E]
        //[I-S]LN=149;[I-E]
      if (Input.isKeyDown("remove") && select == i) RemoveSlot(i); //[I-S]LN=150;[I-E]
      if (trocaslot == i && invent.items.get(i) != null && invent.items.get(trocaslot) != null) { //[I-S]LN=151;[I-E]
        slot[i].setColor(BlueWhite); //[I-S]LN=152;[I-E]
      } else slot[i].setColor(select == i ? Black : White); //[I-S]LN=153;[I-E]
    } //[I-S]LN=154;[I-E]
  } //[I-S]LN=155;[I-E]
 //[I-S]LN=156;[I-E]
  private void modvalue(int valuetroc) { //[I-S]LN=157;[I-E]
    trocaslot = valuetroc; //[I-S]LN=158;[I-E]
    contclick = -1; //[I-S]LN=159;[I-E]
    clicktime = 0; //[I-S]LN=160;[I-E]
  } //[I-S]LN=161;[I-E]
 //[I-S]LN=162;[I-E]
  private void tocaslot(int i, int whatValue, item seleslot) { //[I-S]LN=163;[I-E]
    // troca os dado //[I-S]LN=164;[I-E]
    invent.items.set(i, seleslot); //[I-S]LN=165;[I-E]
    //// troca ui e color //[I-S]LN=166;[I-E]
    if (invent.spait[i] != null) { //[I-S]LN=167;[I-E]
      invent.spait[i].setImage(seleslot != null && seleslot.ui != null ? seleslot.getSpait() : null); //[I-S]LN=168;[I-E]
      invent.spait[i].setColor(seleslot != null ? new Color() : new Color(0, 0, 0, 0)); //[I-S]LN=169;[I-E]
    } //[I-S]LN=170;[I-E]
    //// //[I-S]LN=171;[I-E]
    // torca de valores //[I-S]LN=172;[I-E]
    if (invent.cont[whatValue] != null) { //[I-S]LN=173;[I-E]
      invent.cont[i].setText((whatValue) > 0 ? String.valueOf(whatValue) : null); //[I-S]LN=174;[I-E]
    } //[I-S]LN=175;[I-E]
  } //[I-S]LN=176;[I-E]
 //[I-S]LN=177;[I-E]
  private void RemoveSlot(int i) { //[I-S]LN=178;[I-E]
    UseNoUse(false, i); //[I-S]LN=179;[I-E]
    RemoveItem(i); //[I-S]LN=180;[I-E]
    invent.items.set(i, null); //[I-S]LN=181;[I-E]
    invent.slotAlmout[i] = 0; //[I-S]LN=182;[I-E]
    if (invent.spait[i] != null) { //[I-S]LN=183;[I-E]
      invent.spait[i].setImage(null); //[I-S]LN=184;[I-E]
      invent.spait[i].setColor(Transparent); //[I-S]LN=185;[I-E]
    } //[I-S]LN=186;[I-E]
    if (invent.cont[i] != null) invent.cont[i].setText(""); //[I-S]LN=187;[I-E]
    offonObj("", false, i); //[I-S]LN=188;[I-E]
    modvalue(-1); //[I-S]LN=189;[I-E]
  } //[I-S]LN=190;[I-E]
 //[I-S]LN=191;[I-E]
  private void RemoveItem(int i) { //[I-S]LN=192;[I-E]
    removeItem remove = new removeItem(); //[I-S]LN=193;[I-E]
    item rmItems = invent.items.get(i); //[I-S]LN=194;[I-E]
    int quant = invent.slotAlmout[i]; //[I-S]LN=195;[I-E]
    if (rmItems == null || quant <= 0) return; //[I-S]LN=196;[I-E]
    remove.CaractItem(rmItems, quant, Object, drops); //[I-S]LN=197;[I-E]
  } //[I-S]LN=198;[I-E]
} //[I-S]LN=199;[I-E]
//C-R:onoffinvent
class onoffinvent extends Component { //[I-S]LN=0;[I-E]
  private SUIRect invent, craft,button; //[I-S]LN=1;[I-E]
  @Hide public boolean onoff = false, onoffCraft = false; //[I-S]LN=2;[I-E]
 //[I-S]LN=3;[I-E]
public   void start() { //[I-S]LN=4;[I-E]
    invent = WorldController.findObject("inventory").findChildObject("backgroud").findComponent("suirect"); //[I-S]LN=5;[I-E]
    craft = WorldController.findObject("CriaItem").findChildObject("backgroudCria").findComponent("suirect"); //[I-S]LN=6;[I-E]
    button = WorldController.findObject("inventory").findChildObject("craftButton").findComponent("suirect"); //[I-S]LN=7;[I-E]
     //[I-S]LN=8;[I-E]
  } //[I-S]LN=9;[I-E]
 //[I-S]LN=10;[I-E]
public   void repeat() { //[I-S]LN=11;[I-E]
    macacao(); //[I-S]LN=12;[I-E]
    boolean active = Input.isKeyDown("invent") || Input.keyboard.isKeyDown("r") ? onoff = !onoff : onoff; //[I-S]LN=13;[I-E]
    boolean activeCraft = Input.isKeyDown("craft") || Input.keyboard.isKeyDown("q")? onoffCraft = !onoffCraft : onoffCraft; //[I-S]LN=14;[I-E]
    button.setInt("BottomMargin", onoff ? -145 : 145); //[I-S]LN=15;[I-E]
    invent.setInt("BottomMargin",onoff && !onoffCraft ?-390:400); //[I-S]LN=16;[I-E]
    craft.setInt("BottomMargin", onoff && onoffCraft ? -390 : 400); //[I-S]LN=17;[I-E]
  }  //[I-S]LN=18;[I-E]
 //[I-S]LN=19;[I-E]
  private void macacao() { //[I-S]LN=20;[I-E]
    GUI.drawImage(new Color(), null, (Screen.getWidth() / 2) - 12, (Screen.getHeight() / 2) - 12, 15, 15); //[I-S]LN=21;[I-E]
  } //[I-S]LN=22;[I-E]
} //[I-S]LN=23;[I-E]
//C-R:removeItem
class removeItem { //[I-S]LN=0;[I-E]
  public void CaractItem(item rmItem, int value, SpatialObject objitem,ObjectFile drops) { //[I-S]LN=1;[I-E]
    Vector3 mypos = objitem.getGlobalPosition(); //[I-S]LN=2;[I-E]
    SpatialObject drop = objitem.instantiate(drops, mypos); //[I-S]LN=3;[I-E]
    drop.setName(rmItem.name); //[I-S]LN=4;[I-E]
    drop.setStatic(false); //[I-S]LN=5;[I-E]
    drop.getPhysics().setPhysicsEntity(new Rigidbody()); //[I-S]LN=6;[I-E]
    if (drop.findComponent("item") == null) drop.addComponent(new item()); //[I-S]LN=7;[I-E]
    item addDados = drop.findComponent(item.class); //[I-S]LN=8;[I-E]
    if (drop.findComponent("Collider") == null) drop.addComponent(new Collider()); //[I-S]LN=9;[I-E]
    Collider ItemCollider = drop.findComponent("collider"); //[I-S]LN=10;[I-E]
    if (drop.findComponent("ModelRenderer") == null) drop.addComponent(new ModelRenderer()); //[I-S]LN=11;[I-E]
    ModelRenderer ItemType = drop.findComponent("ModelRenderer"); //[I-S]LN=12;[I-E]
    if (addDados != null) { //[I-S]LN=13;[I-E]
      DadosItem(addDados, rmItem); //[I-S]LN=14;[I-E]
      addDados.QuatItemGrup = value; //[I-S]LN=15;[I-E]
    } //[I-S]LN=16;[I-E]
    if (ItemType != null) ItemType.setModelFile(rmItem.vertex); //[I-S]LN=17;[I-E]
    if (ItemCollider != null) { //[I-S]LN=18;[I-E]
      ItemCollider.setShape(4); //[I-S]LN=19;[I-E]
      ItemCollider.setVertexFile(rmItem.vertex); //[I-S]LN=20;[I-E]
    } //[I-S]LN=21;[I-E]
  } //[I-S]LN=22;[I-E]
 //[I-S]LN=23;[I-E]
  private void DadosItem(item armazena, item dados) { //[I-S]LN=24;[I-E]
       //[I-S]LN=25;[I-E]
    armazena.name = dados.name; //[I-S]LN=26;[I-E]
    armazena.ui = dados.ui; //[I-S]LN=27;[I-E]
    armazena.vertex = dados.vertex; //[I-S]LN=28;[I-E]
    armazena.value = dados.value; //[I-S]LN=29;[I-E]
    armazena.typeDC = dados.typeDC; //[I-S]LN=30;[I-E]
    armazena.maxgrup = dados.maxgrup; //[I-S]LN=31;[I-E]
    armazena.MapSpriteX = dados.MapSpriteX; //[I-S]LN=32;[I-E]
    armazena.MapSpriteY = dados.MapSpriteY; //[I-S]LN=33;[I-E]
    armazena.logica = dados.logica; //[I-S]LN=34;[I-E]
  }  //[I-S]LN=35;[I-E]
} //[I-S]LN=36;[I-E]
//C-R:CraftItem
class CraftItem extends Component { //[I-S]LN=0;[I-E]
  public Texture Sprite; //[I-S]LN=1;[I-E]
  public ArrayList<Receita> receita = new ArrayList<Receita>(); //[I-S]LN=2;[I-E]
  public VertexFile[] obj = new VertexFile[1]; //[I-S]LN=3;[I-E]
  private invertore invent; //[I-S]LN=4;[I-E]
 //[I-S]LN=5;[I-E]
public   void start() { //[I-S]LN=6;[I-E]
    invent = myObject.findComponent("invertore"); //[I-S]LN=7;[I-E]
    ArrayList<item> Items = //[I-S]LN=8;[I-E]
        new ArrayList<item>() { //[I-S]LN=9;[I-E]
          { //[I-S]LN=10;[I-E]
            add(new item("picareta", "Minera", Sprite, obj[0], 5, 1, 1, 0, 0,null)); //[I-S]LN=11;[I-E]
            add(new item("espada", "Dano", Sprite, obj[0], 10, 1, 1, 1, 0,new arma(new espada()))); //[I-S]LN=12;[I-E]
            add(new item("machado", "Dano", Sprite, obj[0], 15, 1, 1, 2, 0,null)); //[I-S]LN=13;[I-E]
            add(new item("tocha", "Luz", Sprite, obj[0], 10, 1, 64, 0, 1,new tocha())); //[I-S]LN=14;[I-E]
            add(new item("pão", "Fome", Sprite, obj[1], 20, 1, 64, 1, 1, null)); //[I-S]LN=15;[I-E]
            add(new item("tabua", "Contrução", Sprite, obj[0], 20, 1, 64, 3, 2, null)); //[I-S]LN=16;[I-E]
            add(new item("galho", "Dano", Sprite, obj[0], 20, 1, 64, 0, 2, new arma(new espada()))); //[I-S]LN=17;[I-E]
            add(new item("craftTable", "CraftItem", Sprite, obj[1], 9, 1, 64, 3, 3, null)); //[I-S]LN=18;[I-E]
            add(new item("fornalha", "assar", Sprite, obj[1], 64, 1, 64, 3, 1, null)); //[I-S]LN=19;[I-E]
            add(new item("baú", "armazena", Sprite, obj[1], 64, 1, 64, 2, 3, null)); //[I-S]LN=20;[I-E]
          } //[I-S]LN=21;[I-E]
        }; //[I-S]LN=22;[I-E]
    receita.add(new Receita(new String[] {"pedra", "pedra", "pedra", null, "galho", null, null, "galho", null}, Items.get(0))); //[I-S]LN=23;[I-E]
    receita.add(new Receita(new String[] {null, "pedra", null, null, "pedra", null, null, "galho", null}, Items.get(1))); //[I-S]LN=24;[I-E]
    receita.add(new Receita(new String[] {"pedra", "galho", null, "pedra", "galho", null, null, "galho", null}, Items.get(2))); //[I-S]LN=25;[I-E]
    receita.add(new Receita(new String[] {null, "carvão", null, null, "galho", null, null, null, null}, Items.get(3))); //[I-S]LN=26;[I-E]
    receita.add(new Receita(new String[] {null, null, null, "trigo", "trigo", "trigo", null, null, null}, Items.get(4))); //[I-S]LN=27;[I-E]
    receita.add(new Receita(new String[] {null, null, null, null, "troco", null, null, null, null}, Items.get(5))); //[I-S]LN=28;[I-E]
    receita.add(new Receita(new String[] {null, null, null, null, "tabua", null, null, null, null}, Items.get(6))); //[I-S]LN=29;[I-E]
    receita.add(new Receita(new String[] {null, "tabua", "tabua", null, "tabua", "tabua", null, null, null}, Items.get(7))); //[I-S]LN=30;[I-E]
    receita.add(new Receita(new String[] {"pedra", "pedra", "pedra", "pedra", null, "pedra", "pedra", "pedra", "pedra"}, Items.get(8))); //[I-S]LN=31;[I-E]
    receita.add(new Receita(new String[] {"tabua", "tabua", "tabua", "tabua", null, "tabua", "tabua", "tabua", "tabua"}, Items.get(9))); //[I-S]LN=32;[I-E]
  }  //[I-S]LN=33;[I-E]
 //[I-S]LN=34;[I-E]
public   void repeat() { //[I-S]LN=35;[I-E]
    checkItem(); //[I-S]LN=36;[I-E]
    if (Input.isKeyDown("output") && invent.items.get(29) != null) craftItem(); //[I-S]LN=37;[I-E]
  } //[I-S]LN=38;[I-E]
 //[I-S]LN=39;[I-E]
  public void checkItem() { //[I-S]LN=40;[I-E]
    List<item> CheckItem = invent.items.subList(20, 29); //[I-S]LN=41;[I-E]
    boolean checoReciete = false; //[I-S]LN=42;[I-E]
    for (Receita r : receita) { //[I-S]LN=43;[I-E]
      if (r.material(CheckItem)) { //[I-S]LN=44;[I-E]
        item checkOneObj = r.getGeraItem(); //[I-S]LN=45;[I-E]
        checoReciete = true; //[I-S]LN=46;[I-E]
        if (invent.items.get(29) == null || !invent.items.get(29).name.equals(checkOneObj.name)) { //[I-S]LN=47;[I-E]
          invent.items.set(29, checkOneObj); //[I-S]LN=48;[I-E]
          invent.spait[29].setImage(checkOneObj.getSpait()); //[I-S]LN=49;[I-E]
          invent.spait[29].setColor(new Color()); //[I-S]LN=50;[I-E]
        } //[I-S]LN=51;[I-E]
        invent.cont[29].setText("1"); //[I-S]LN=52;[I-E]
        break; //[I-S]LN=53;[I-E]
      } //[I-S]LN=54;[I-E]
    } //[I-S]LN=55;[I-E]
    if (!checoReciete) offItem(29, false); //[I-S]LN=56;[I-E]
  } //[I-S]LN=57;[I-E]
 //[I-S]LN=58;[I-E]
  public void craftItem() { //[I-S]LN=59;[I-E]
    List<item> CheckItem = invent.items.subList(20, 29); //[I-S]LN=60;[I-E]
    if (invent.items.get(29) == null) return; //[I-S]LN=61;[I-E]
    for (Receita r : receita) { //[I-S]LN=62;[I-E]
      if (r.material(CheckItem)) { //[I-S]LN=63;[I-E]
        item checkOneObj = r.getGeraItem(); //[I-S]LN=64;[I-E]
        if (!AddItemSlot(checkOneObj)) return; //[I-S]LN=65;[I-E]
        boolean[] uso = new boolean[9]; //[I-S]LN=66;[I-E]
        for (int items = 20; items < 29; items++) { //[I-S]LN=67;[I-E]
          String SeeOneObj = r.getItems()[items - 20]; //[I-S]LN=68;[I-E]
          if (SeeOneObj == null || invent.items.get(items) == null || uso[items - 20]) continue; //[I-S]LN=69;[I-E]
          if (!invent.items.get(items).name.equals(SeeOneObj)) continue; //[I-S]LN=70;[I-E]
          invent.slotAlmout[items]--; //[I-S]LN=71;[I-E]
          if (invent.slotAlmout[items] <= 0) offItem(items, true); //[I-S]LN=72;[I-E]
          else invent.cont[items].setText("" + invent.slotAlmout[items]); //[I-S]LN=73;[I-E]
          uso[items - 20] = true; //[I-S]LN=74;[I-E]
        } //[I-S]LN=75;[I-E]
        return; //[I-S]LN=76;[I-E]
      } //[I-S]LN=77;[I-E]
    } //[I-S]LN=78;[I-E]
  } //[I-S]LN=79;[I-E]
 //[I-S]LN=80;[I-E]
  public boolean AddItemSlot(item newItem) { //[I-S]LN=81;[I-E]
    int Void = -1; //[I-S]LN=82;[I-E]
    for (int i = 0; i < 20; i++) { //[I-S]LN=83;[I-E]
      item atual = invent.items.get(i); //[I-S]LN=84;[I-E]
      if (atual != null) { //[I-S]LN=85;[I-E]
        if (invent.items.get(i).name.equals(newItem.name) && atual.maxgrup > invent.slotAlmout[i]) { //[I-S]LN=86;[I-E]
          invent.cont[i].setText("" + (++invent.slotAlmout[i])); //[I-S]LN=87;[I-E]
          return true; //[I-S]LN=88;[I-E]
        } //[I-S]LN=89;[I-E]
      } else if (Void == -1) Void = i; //[I-S]LN=90;[I-E]
    } //[I-S]LN=91;[I-E]
    if (Void != -1) { //[I-S]LN=92;[I-E]
      invent.items.set(Void, newItem); //[I-S]LN=93;[I-E]
      invent.slotAlmout[Void] = 1; //[I-S]LN=94;[I-E]
      invent.spait[Void].setImage(newItem.getSpait()); //[I-S]LN=95;[I-E]
      invent.spait[Void].setColor(new Color()); //[I-S]LN=96;[I-E]
      invent.cont[Void].setText("1"); //[I-S]LN=97;[I-E]
      return true; //[I-S]LN=98;[I-E]
    } //[I-S]LN=99;[I-E]
    return false; //[I-S]LN=100;[I-E]
  } //[I-S]LN=101;[I-E]
 //[I-S]LN=102;[I-E]
  private void offItem(int i, boolean off) { //[I-S]LN=103;[I-E]
    invent.items.set(i, null); //[I-S]LN=104;[I-E]
    invent.spait[i].setImage(null); //[I-S]LN=105;[I-E]
    invent.spait[i].setColor(new Color(0, 0, 0, 0)); //[I-S]LN=106;[I-E]
    if (off) invent.slotAlmout[i] = 0; //[I-S]LN=107;[I-E]
    invent.cont[i].setText(""); //[I-S]LN=108;[I-E]
  } //[I-S]LN=109;[I-E]
 //[I-S]LN=110;[I-E]
  public class Receita { //[I-S]LN=111;[I-E]
    private String[] items = new String[9]; //[I-S]LN=112;[I-E]
    private item GeraItem; //[I-S]LN=113;[I-E]
 //[I-S]LN=114;[I-E]
    public Receita() { //[I-S]LN=115;[I-E]
      super(); //[I-S]LN=116;[I-E]
    } //[I-S]LN=117;[I-E]
 //[I-S]LN=118;[I-E]
    public Receita(String[] items, item GeraItem) { //[I-S]LN=119;[I-E]
      super(); //[I-S]LN=120;[I-E]
      this.items = items; //[I-S]LN=121;[I-E]
      this.GeraItem = GeraItem; //[I-S]LN=122;[I-E]
    } //[I-S]LN=123;[I-E]
 //[I-S]LN=124;[I-E]
    public String[] getItems() { //[I-S]LN=125;[I-E]
      return items; //[I-S]LN=126;[I-E]
    } //[I-S]LN=127;[I-E]
 //[I-S]LN=128;[I-E]
    public item getGeraItem() { //[I-S]LN=129;[I-E]
      return GeraItem; //[I-S]LN=130;[I-E]
    } //[I-S]LN=131;[I-E]
 //[I-S]LN=132;[I-E]
    public boolean material(List<item> inputSlot) { //[I-S]LN=133;[I-E]
      if (inputSlot.size() != 9) return false; //[I-S]LN=134;[I-E]
      for (int i = 0; i < 9; i++) { //[I-S]LN=135;[I-E]
        String requisitos = items[i]; //[I-S]LN=136;[I-E]
        String atual = inputSlot.get(i) != null ? inputSlot.get(i).name : null; //[I-S]LN=137;[I-E]
        if ((requisitos == null && atual != null) || (requisitos != null && !requisitos.equals(atual))) { //[I-S]LN=138;[I-E]
          return false; //[I-S]LN=139;[I-E]
        } //[I-S]LN=140;[I-E]
      } //[I-S]LN=141;[I-E]
      return true; //[I-S]LN=142;[I-E]
    } //[I-S]LN=143;[I-E]
  } //[I-S]LN=144;[I-E]
} //[I-S]LN=145;[I-E]
//C-R:atributo
abstract class atributo{ //[I-S]LN=0;[I-E]
  public abstract void Used(item obj); //[I-S]LN=1;[I-E]
  public abstract void NoUsed(item obj); //[I-S]LN=2;[I-E]
} //[I-S]LN=3;[I-E]
//C-R:tocha
class tocha extends atributo { //[I-S]LN=0;[I-E]
  private SpatialObject mao; //[I-S]LN=1;[I-E]
  private Light luz; //[I-S]LN=2;[I-E]
  private Color fogo = new Color(255, 200, 100); //[I-S]LN=3;[I-E]
 //[I-S]LN=4;[I-E]
  void start() { //[I-S]LN=5;[I-E]
    mao = WorldController.findObject("itemMust").findChildObject("object"); //[I-S]LN=6;[I-E]
    if (mao.findComponent("light") == null) mao.addComponent(new Light(1)); //[I-S]LN=7;[I-E]
    if (luz == null) luz = mao.findComponent("Light"); //[I-S]LN=8;[I-E]
    luz.setDiameter(15); //[I-S]LN=9;[I-E]
  } //[I-S]LN=10;[I-E]
 //[I-S]LN=11;[I-E]
  public void Used(item obj) { //[I-S]LN=12;[I-E]
    start(); //[I-S]LN=13;[I-E]
    if (luz != null) { //[I-S]LN=14;[I-E]
      luz.setIntensity(2f); //[I-S]LN=15;[I-E]
      luz.setColor(fogo); //[I-S]LN=16;[I-E]
    }  //[I-S]LN=17;[I-E]
  } //[I-S]LN=18;[I-E]
 //[I-S]LN=19;[I-E]
  public void NoUsed(item obj) { //[I-S]LN=20;[I-E]
    start(); //[I-S]LN=21;[I-E]
    if (luz != null) luz.setIntensity(0f); //[I-S]LN=22;[I-E]
  } //[I-S]LN=23;[I-E]
} //[I-S]LN=24;[I-E]
//C-R:espada
class espada implements arma.AcaoItem { //[I-S]LN=0;[I-E]
  public void execute(item obj) { //[I-S]LN=1;[I-E]
      Console.log("atace espada"); //[I-S]LN=2;[I-E]
  } //[I-S]LN=3;[I-E]
}  //[I-S]LN=4;[I-E]
//C-R:arma
class arma extends atributo { //[I-S]LN=0;[I-E]
  public interface AcaoItem { //[I-S]LN=1;[I-E]
      void execute(item arm); //[I-S]LN=2;[I-E]
  } //[I-S]LN=3;[I-E]
  private AnimItem anim; //[I-S]LN=4;[I-E]
  private AcaoItem acao; //[I-S]LN=5;[I-E]
 //[I-S]LN=6;[I-E]
  public arma(AcaoItem acao) { //[I-S]LN=7;[I-E]
    this.acao = acao; //[I-S]LN=8;[I-E]
  } //[I-S]LN=9;[I-E]
  void start(){ //[I-S]LN=10;[I-E]
      anim = WorldController.findObject("object").findComponent("AnimItem"); //[I-S]LN=11;[I-E]
  } //[I-S]LN=12;[I-E]
  public void Used(item obj) { //[I-S]LN=13;[I-E]
      if(anim == null)start(); //[I-S]LN=14;[I-E]
      anim.setButton(true); //[I-S]LN=15;[I-E]
      if(anim.getOnOff())acao.execute(obj); //[I-S]LN=16;[I-E]
  } //[I-S]LN=17;[I-E]
 //[I-S]LN=18;[I-E]
  public void NoUsed(item obj) { //[I-S]LN=19;[I-E]
      if(anim == null)start(); //[I-S]LN=20;[I-E]
      anim.setButton(false); //[I-S]LN=21;[I-E]
  } //[I-S]LN=22;[I-E]
}  //[I-S]LN=23;[I-E]
//C-R:AnimItem
class AnimItem extends Component { //[I-S]LN=0;[I-E]
  private boolean onoff = false; //[I-S]LN=1;[I-E]
  private SpatialObject button; //[I-S]LN=2;[I-E]
  public int value = 0; //[I-S]LN=3;[I-E]
 //[I-S]LN=4;[I-E]
public   void start() { //[I-S]LN=5;[I-E]
    button = WorldController.findObject("AcaoItem"); //[I-S]LN=6;[I-E]
  } //[I-S]LN=7;[I-E]
 //[I-S]LN=8;[I-E]
public   void repeat() { //[I-S]LN=9;[I-E]
Quaternion myrot = myObject.getRotation(); //[I-S]LN=10;[I-E]
    if (Input.isKeyDown("acaoitem")) onoff = !onoff; //[I-S]LN=11;[I-E]
    if (value <= 75 && getOnOff()) value += 25; //[I-S]LN=12;[I-E]
    else if (value >= 0) { //[I-S]LN=13;[I-E]
      value -= 25; //[I-S]LN=14;[I-E]
      onoff = false; //[I-S]LN=15;[I-E]
    }  //[I-S]LN=16;[I-E]
    myrot.setX(value); //[I-S]LN=17;[I-E]
  } //[I-S]LN=18;[I-E]
 //[I-S]LN=19;[I-E]
  public boolean getOnOff() { //[I-S]LN=20;[I-E]
    return onoff; //[I-S]LN=21;[I-E]
  } //[I-S]LN=22;[I-E]
 //[I-S]LN=23;[I-E]
  public void setButton(boolean tf) { //[I-S]LN=24;[I-E]
    button.setEnabled(tf); //[I-S]LN=25;[I-E]
  } //[I-S]LN=26;[I-E]
} //[I-S]LN=27;[I-E]
//C-R:weatheffect
class weatheffect extends Component { //[I-S]LN=0;[I-E]
  public SpatialObject item; //[I-S]LN=1;[I-E]
  private float lerpPos = 20f, lerpRot = 20f; //[I-S]LN=2;[I-E]
 //[I-S]LN=3;[I-E]
public   void repeat() { //[I-S]LN=4;[I-E]
Vector3 myPos = myObject.getGlobalPosition(); //[I-S]LN=5;[I-E]
Quaternion myRot = myObject.getGlobalRotation(); //[I-S]LN=6;[I-E]
myPos.blend(item.getGlobalPosition(), Math.bySecond(lerpPos)); //[I-S]LN=7;[I-E]
myRot.blend(item.getGlobalRotation(), Math.bySecond(lerpRot)); //[I-S]LN=8;[I-E]
     //[I-S]LN=9;[I-E]
    myObject.setPosition(myPos); //[I-S]LN=10;[I-E]
    myObject.setRotation(myRot); //[I-S]LN=11;[I-E]
 }  //[I-S]LN=12;[I-E]
} //[I-S]LN=13;[I-E]
//C-R:atlas
class atlas extends Component { //[I-S]LN=0;[I-E]
  private Texture ui; //[I-S]LN=1;[I-E]
  public Texture Spait; //[I-S]LN=2;[I-E]
  public int MapSpriteX, MapSpriteY; //[I-S]LN=3;[I-E]
  public int altura = 21, largura = 21; //[I-S]LN=4;[I-E]
  public SUIImage texture; //[I-S]LN=5;[I-E]
 //[I-S]LN=6;[I-E]
public   void start() { //[I-S]LN=7;[I-E]
    texture = myObject.findComponent("suiimage"); //[I-S]LN=8;[I-E]
  }  //[I-S]LN=9;[I-E]
 //[I-S]LN=10;[I-E]
public   void repeat() { //[I-S]LN=11;[I-E]
    texture.setImage(getSpait()); //[I-S]LN=12;[I-E]
  } //[I-S]LN=13;[I-E]
 //[I-S]LN=14;[I-E]
  public Texture getSpait() { //[I-S]LN=15;[I-E]
    if (ui == null) return null; //[I-S]LN=16;[I-E]
    if (Spait == null) Spait = Atlas(); //[I-S]LN=17;[I-E]
    return Spait; //[I-S]LN=18;[I-E]
  } //[I-S]LN=19;[I-E]
 //[I-S]LN=20;[I-E]
  public Texture Atlas() { //[I-S]LN=21;[I-E]
    if (ui == null) return null; //[I-S]LN=22;[I-E]
    Texture mapSprite = new Texture(largura, altura, true); //[I-S]LN=23;[I-E]
    int spaitx = largura * MapSpriteX; //[I-S]LN=24;[I-E]
    int spaity = altura * MapSpriteY; //[I-S]LN=25;[I-E]
 //[I-S]LN=26;[I-E]
    for (int y = 0; y < altura; y++) { //[I-S]LN=27;[I-E]
      for (int x = 0; x < largura; x++) { //[I-S]LN=28;[I-E]
        Color color = ui.get(x + spaitx, y + spaity); //[I-S]LN=29;[I-E]
        mapSprite.setPixel(x, y, color); //[I-S]LN=30;[I-E]
      } //[I-S]LN=31;[I-E]
    } //[I-S]LN=32;[I-E]
    mapSprite.apply(); //[I-S]LN=33;[I-E]
    return mapSprite; //[I-S]LN=34;[I-E]
  } //[I-S]LN=35;[I-E]
} //[I-S]LN=36;[I-E]
//C-R:selectslot2
class selectslot2 extends Component { //[I-S]LN=0;[I-E]
  private List<SpatialObject> Item = new ArrayList<SpatialObject>(); //[I-S]LN=1;[I-E]
  private SUIKeyEventListener[] key = new SUIKeyEventListener[30]; //[I-S]LN=2;[I-E]
  private SUIImage[] spait = new SUIImage[30]; //[I-S]LN=3;[I-E]
  private int select = -1, checkclick = 0; //[I-S]LN=4;[I-E]
  private int TrocaSlot = -1; //[I-S]LN=5;[I-E]
  private invent invent; //[I-S]LN=6;[I-E]
  private float timeclick = 0; //[I-S]LN=7;[I-E]
  private SUIText Name; //[I-S]LN=8;[I-E]
  // public ObjectFile Obj; //[I-S]LN=9;[I-E]
  private SpatialObject painel, Hand; //[I-S]LN=10;[I-E]
  private Color black, blue, Transparet,white; //[I-S]LN=11;[I-E]
  private onoffinvent OffInvent; //[I-S]LN=12;[I-E]
 //[I-S]LN=13;[I-E]
public   void start() { //[I-S]LN=14;[I-E]
     black = new Color(0, 0, 0); //[I-S]LN=15;[I-E]
     Transparet = new Color(0, 0, 0, 0); //[I-S]LN=16;[I-E]
     blue =new Color(255,0,0);  //[I-S]LN=17;[I-E]
     white = new Color(); //[I-S]LN=18;[I-E]
    OffInvent = myObject.findComponent("onoffinvent"); //[I-S]LN=19;[I-E]
    Hand = WorldController.findObject("object"); //[I-S]LN=20;[I-E]
    painel = WorldController.findObject("information"); //[I-S]LN=21;[I-E]
    Name = painel.findComponent("suitext"); //[I-S]LN=22;[I-E]
    invent = myObject.findComponent("invent"); //[I-S]LN=23;[I-E]
    for (int i = 0; i < 30; i++) { //[I-S]LN=24;[I-E]
      String obj = i < 5 ? "hotbar" : i < 20 ? "backgroud" : "backgroudCria"; //[I-S]LN=25;[I-E]
      String child = i < 5 ? "slotH" + (i + 1) : i < 20 ? "slot" + (i - 4) : i < 29 ? "slotCria" + (i - 19) : "output"; //[I-S]LN=26;[I-E]
      Item.add(i, WorldController.findObject(obj).findChildObject(child)); //[I-S]LN=27;[I-E]
    } //[I-S]LN=28;[I-E]
    for (int i = 0; i < Item.size(); i++) { //[I-S]LN=29;[I-E]
      if (Item.get(i).findComponent("SUIKeyEventListener") == null) Item.get(i).addComponent(new SUIKeyEventListener()); //[I-S]LN=30;[I-E]
      SUIKeyEventListener keys = Item.get(i).findComponent("SUIKeyEventListener"); //[I-S]LN=31;[I-E]
      keys.setKeyName(Item.get(i).getName()); //[I-S]LN=32;[I-E]
      key[i] = Item.get(i).findComponent("SUIKeyEventListener"); //[I-S]LN=33;[I-E]
      spait[i] = Item.get(i).findComponent("SUIImage"); //[I-S]LN=34;[I-E]
    } //[I-S]LN=35;[I-E]
    Name.setText(""); //[I-S]LN=36;[I-E]
    painel.setEnabled(false); //[I-S]LN=37;[I-E]
  } //[I-S]LN=38;[I-E]
 //[I-S]LN=39;[I-E]
public   void repeat() { //[I-S]LN=40;[I-E]
    if (timeclick <= 1) timeclick += 0.01f; //[I-S]LN=41;[I-E]
    seleciona(); //[I-S]LN=42;[I-E]
    UpSlot(); //[I-S]LN=43;[I-E]
    if(Input.isKeyDown("invent") || Input.keyboard.isKeyDown("r")){ //[I-S]LN=44;[I-E]
        if(select > 4) select =-1; //[I-S]LN=45;[I-E]
        painel.setEnabled(false); //[I-S]LN=46;[I-E]
    } //[I-S]LN=47;[I-E]
     //[I-S]LN=48;[I-E]
    if(!OffInvent.onoff && TrocaSlot != -1){ //[I-S]LN=49;[I-E]
        painel.setEnabled(false); //[I-S]LN=50;[I-E]
        TrocaSlot =-1; //[I-S]LN=51;[I-E]
        select = -1; //[I-S]LN=52;[I-E]
    } //[I-S]LN=53;[I-E]
  } //[I-S]LN=54;[I-E]
 //[I-S]LN=55;[I-E]
  private void seleciona() { //[I-S]LN=56;[I-E]
    for (int i = 0; i < key.length; i++) { //[I-S]LN=57;[I-E]
      if (key[i].isDown()) { //[I-S]LN=58;[I-E]
        if (select == i) { //[I-S]LN=59;[I-E]
            OffObject("",false,i); //[I-S]LN=60;[I-E]
          select = -1; //[I-S]LN=61;[I-E]
          onoffSelect(-1); //[I-S]LN=62;[I-E]
        } else { //[I-S]LN=63;[I-E]
          if (invent.items.get(i) != null && invent.items.get(i).name != null) { //[I-S]LN=64;[I-E]
            item2 dados = invent.items.get(i); //[I-S]LN=65;[I-E]
            String txt = "\n name: " + dados.name + "\n " + dados.type + ": " + dados.value; //[I-S]LN=66;[I-E]
            OffObject(txt,true,i); //[I-S]LN=67;[I-E]
          }else OffObject("",false,i); //[I-S]LN=68;[I-E]
          select = i; //[I-S]LN=69;[I-E]
        } //[I-S]LN=70;[I-E]
        break; //[I-S]LN=71;[I-E]
      } //[I-S]LN=72;[I-E]
    } //[I-S]LN=73;[I-E]
  } //[I-S]LN=74;[I-E]
 //[I-S]LN=75;[I-E]
  private void OffObject(String value, boolean onoff, int i) { //[I-S]LN=76;[I-E]
    Name.setText(value); //[I-S]LN=77;[I-E]
    if(OffInvent.onoff) painel.setEnabled(onoff); //[I-S]LN=78;[I-E]
    boolean activeinvent = i >= 0 && i < 5; //[I-S]LN=79;[I-E]
    Hand.setEnabled(onoff && activeinvent); //[I-S]LN=80;[I-E]
    if (Hand.findComponent("ModelRenderer") == null) Hand.addComponent(new ModelRenderer()); //[I-S]LN=81;[I-E]
    ModelRenderer itemHand = Hand.findComponent("ModelRenderer"); //[I-S]LN=82;[I-E]
    if (itemHand == null || invent.items.get(i) == null) return; //[I-S]LN=83;[I-E]
    itemHand.setModelFile(invent.items.get(i).Vertex); //[I-S]LN=84;[I-E]
  }  //[I-S]LN=85;[I-E]
 //[I-S]LN=86;[I-E]
  private void UpSlot() { //[I-S]LN=87;[I-E]
    for (int i = 0; i < key.length; i++) { //[I-S]LN=88;[I-E]
      if (key[i].isDown()) { //[I-S]LN=89;[I-E]
        if (checkclick == i && timeclick < 0.20f) { //[I-S]LN=90;[I-E]
          onoffSelect(i); //[I-S]LN=91;[I-E]
        } else { //[I-S]LN=92;[I-E]
          checkclick = i; //[I-S]LN=93;[I-E]
          timeclick = 0; //[I-S]LN=94;[I-E]
        } //[I-S]LN=95;[I-E]
        if (TrocaSlot != -1 && TrocaSlot != i) { //[I-S]LN=96;[I-E]
          item2 Select = invent.items.get(i); //[I-S]LN=97;[I-E]
          item2 Trocado = invent.items.get(TrocaSlot); //[I-S]LN=98;[I-E]
          if (Select != null && Trocado != null && Select.name.equals(Trocado.name)) { //[I-S]LN=99;[I-E]
            int Limite = Select.MaxTrag; //[I-S]LN=100;[I-E]
            int Space = Limite - invent.value[i]; //[I-S]LN=101;[I-E]
            if (Space > 0) { //[I-S]LN=102;[I-E]
              int Transfere = Math.min(invent.value[TrocaSlot], Space); //[I-S]LN=103;[I-E]
              invent.value[i] += Transfere; //[I-S]LN=104;[I-E]
              invent.value[TrocaSlot] -= Transfere; //[I-S]LN=105;[I-E]
              invent.cont[i].setText(invent.value[i] > 0 ? String.valueOf(invent.value[i]) : ""); //[I-S]LN=106;[I-E]
              invent.cont[TrocaSlot].setText(invent.value[TrocaSlot] > 0 ? String.valueOf(invent.value[TrocaSlot]) : ""); //[I-S]LN=107;[I-E]
 //[I-S]LN=108;[I-E]
              if (invent.value[TrocaSlot] <= 0) { //[I-S]LN=109;[I-E]
                invent.items.set(TrocaSlot, null); //[I-S]LN=110;[I-E]
                invent.spait[TrocaSlot].setImage(null); //[I-S]LN=111;[I-E]
                invent.spait[TrocaSlot].setColor(Transparet); //[I-S]LN=112;[I-E]
                invent.cont[TrocaSlot].setText(""); //[I-S]LN=113;[I-E]
              } //[I-S]LN=114;[I-E]
            } //[I-S]LN=115;[I-E]
          } else { //[I-S]LN=116;[I-E]
            MoveObjSlot(i, Trocado); //[I-S]LN=117;[I-E]
            MoveObjSlot(TrocaSlot, Select); //[I-S]LN=118;[I-E]
          } //[I-S]LN=119;[I-E]
          onoffSelect(-1); //[I-S]LN=120;[I-E]
        } //[I-S]LN=121;[I-E]
        break; //[I-S]LN=122;[I-E]
      } //[I-S]LN=123;[I-E]
      if(Input.isKeyDown("remove") && select == i) RemoveItem(i); //[I-S]LN=124;[I-E]
      if (spait[i] == null) continue; //[I-S]LN=125;[I-E]
      if (TrocaSlot == i) spait[i].setColor(blue); //[I-S]LN=126;[I-E]
      else spait[i].setColor(select == i ? black : white); //[I-S]LN=127;[I-E]
    } //[I-S]LN=128;[I-E]
  } //[I-S]LN=129;[I-E]
 //[I-S]LN=130;[I-E]
  public void onoffSelect(int i) { //[I-S]LN=131;[I-E]
    checkclick = -1; //[I-S]LN=132;[I-E]
    timeclick = 0; //[I-S]LN=133;[I-E]
    TrocaSlot = i; //[I-S]LN=134;[I-E]
  } //[I-S]LN=135;[I-E]
 //[I-S]LN=136;[I-E]
  private void MoveObjSlot(int i, item2 select) { //[I-S]LN=137;[I-E]
    invent.items.set(i, select); //[I-S]LN=138;[I-E]
 //[I-S]LN=139;[I-E]
    if (invent.spait[i] != null) { //[I-S]LN=140;[I-E]
      invent.spait[i].setImage(select != null && select.ui != null ? select.getAtlas() : null); //[I-S]LN=141;[I-E]
      invent.spait[i].setColor(select != null ? new Color() : new Color(0, 0, 0, 0)); //[I-S]LN=142;[I-E]
    } //[I-S]LN=143;[I-E]
    int SelectValue = invent.value[i]; //[I-S]LN=144;[I-E]
    int WhatValue = invent.value[TrocaSlot]; //[I-S]LN=145;[I-E]
    invent.value[TrocaSlot] = SelectValue; //[I-S]LN=146;[I-E]
    invent.value[i] = WhatValue; //[I-S]LN=147;[I-E]
    if (invent.cont[i] != null) { //[I-S]LN=148;[I-E]
      invent.cont[i].setText(WhatValue > 0 ? String.valueOf(WhatValue) : ""); //[I-S]LN=149;[I-E]
    } //[I-S]LN=150;[I-E]
  } //[I-S]LN=151;[I-E]
  private void RemoveItem(int i){ //[I-S]LN=152;[I-E]
      invent.items.set(i, null); //[I-S]LN=153;[I-E]
      invent.value[i] = 0; //[I-S]LN=154;[I-E]
      if(invent.spait[i] != null){ //[I-S]LN=155;[I-E]
          invent.spait[i].setImage(null); //[I-S]LN=156;[I-E]
          invent.spait[i].setColor(Transparet); //[I-S]LN=157;[I-E]
      } //[I-S]LN=158;[I-E]
      if(invent.cont[i] != null) invent.cont[i].setText(""); //[I-S]LN=159;[I-E]
      onoffSelect(-1); //[I-S]LN=160;[I-E]
      OffObject("",false,i); //[I-S]LN=161;[I-E]
  } //[I-S]LN=162;[I-E]
} //[I-S]LN=163;[I-E]
//C-R:invent
class invent extends Component { //[I-S]LN=0;[I-E]
  @Hide public List<SpatialObject> Item = new ArrayList<SpatialObject>(); //[I-S]LN=1;[I-E]
  @Hide public List<item2> items = new ArrayList<item2>(); //[I-S]LN=2;[I-E]
  @Hide public SUIImage[] spait = new SUIImage[30]; //[I-S]LN=3;[I-E]
  @Hide public int[] value = new int[30]; //[I-S]LN=4;[I-E]
  @Hide public SUIText[] cont = new SUIText[30]; //[I-S]LN=5;[I-E]
  private SpatialObject button; //[I-S]LN=6;[I-E]
  private boolean onoff = false; //[I-S]LN=7;[I-E]
  private SUIText infor; //[I-S]LN=8;[I-E]
 //[I-S]LN=9;[I-E]
public   void start() { //[I-S]LN=10;[I-E]
    button = WorldController.findObject("colete"); //[I-S]LN=11;[I-E]
    infor = WorldController.findObject("HUD").findComponent("suitext"); //[I-S]LN=12;[I-E]
    slot(); //[I-S]LN=13;[I-E]
    for (int i = 0; i < cont.length; i++) { //[I-S]LN=14;[I-E]
      items.add(i, null); //[I-S]LN=15;[I-E]
      if (cont[i] != null) cont[i].setText(""); //[I-S]LN=16;[I-E]
      if (spait[i] != null) spait[i].setColor(new Color(0, 0, 0, 0)); //[I-S]LN=17;[I-E]
    } //[I-S]LN=18;[I-E]
  } //[I-S]LN=19;[I-E]
 //[I-S]LN=20;[I-E]
  private void slot() { //[I-S]LN=21;[I-E]
    for (int i = 0; i < 30; i++) { //[I-S]LN=22;[I-E]
      String obj = i < 5 ? "slotH" + (i + 1) : i < 20 ? "slot" + (i - 4) : i < 29 ? "slotCria" + (i - 19) : "output"; //[I-S]LN=23;[I-E]
      String child = i < 5 ? "spait" + (i + 1) : i < 20 ? "item" + (i - 4) : i < 29 ? "item" + (i - 19) : "outputCria"; //[I-S]LN=24;[I-E]
      Item.add(i, WorldController.findObject(obj).findChildObject(child)); //[I-S]LN=25;[I-E]
      cont[i] = Item.get(i).findComponent("suitext"); //[I-S]LN=26;[I-E]
      spait[i] = Item.get(i).findComponent("suiimage"); //[I-S]LN=27;[I-E]
    }  //[I-S]LN=28;[I-E]
  } //[I-S]LN=29;[I-E]
 //[I-S]LN=30;[I-E]
public   void repeat() { //[I-S]LN=31;[I-E]
    laser(); //[I-S]LN=32;[I-E]
    button.setEnabled(onoff); //[I-S]LN=33;[I-E]
  } //[I-S]LN=34;[I-E]
 //[I-S]LN=35;[I-E]
  private void laser() { //[I-S]LN=36;[I-E]
    SpatialObject came = myObject.findChildObject("vision"); //[I-S]LN=37;[I-E]
    LaserHit hit = new Laser().trace(came.getGlobalPosition(), came.forward(), 6f); //[I-S]LN=38;[I-E]
if (hit == null || !"item".equals(hit.getObject().getTag())) { //[I-S]LN=39;[I-E]
      infor.setText(); //[I-S]LN=40;[I-E]
      onoff = false; //[I-S]LN=41;[I-E]
      return; //[I-S]LN=42;[I-E]
    } //[I-S]LN=43;[I-E]
 //[I-S]LN=44;[I-E]
    item2 objecthit = hit.getObject().findComponent("item2"); //[I-S]LN=45;[I-E]
    infor.setText("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname: " + objecthit.name + ", " + objecthit.type + ": " + objecthit.value); //[I-S]LN=46;[I-E]
    onoff = true; //[I-S]LN=47;[I-E]
    if (!Input.isKeyPressed("coleta") && !Input.keyboard.isKeyDown("e")) return; //[I-S]LN=48;[I-E]
    for (int i = 0; i < items.size(); i++) { //[I-S]LN=49;[I-E]
      if (items.get(i) == null || items.get(i).name.equals(objecthit.name)) { //[I-S]LN=50;[I-E]
        if (value[i] < objecthit.MaxTrag) { //[I-S]LN=51;[I-E]
          addItem(objecthit, i); //[I-S]LN=52;[I-E]
          hit.getObject().destroy(); //[I-S]LN=53;[I-E]
          onoff = false; //[I-S]LN=54;[I-E]
          break; //[I-S]LN=55;[I-E]
        } //[I-S]LN=56;[I-E]
      } //[I-S]LN=57;[I-E]
    } //[I-S]LN=58;[I-E]
  } //[I-S]LN=59;[I-E]
 //[I-S]LN=60;[I-E]
  private void addItem(item2 additem, int i) { //[I-S]LN=61;[I-E]
    int ArmazInt = ++value[i]; //[I-S]LN=62;[I-E]
    items.set(i, additem); //[I-S]LN=63;[I-E]
    if (cont[i] == null) return; //[I-S]LN=64;[I-E]
    cont[i].setText(ArmazInt > 0 ? String.valueOf(ArmazInt) : "1"); //[I-S]LN=65;[I-E]
    if (i >= spait.length) return; //[I-S]LN=66;[I-E]
    spait[i].setImage(additem.getAtlas()); //[I-S]LN=67;[I-E]
    spait[i].setColor(new Color()); //[I-S]LN=68;[I-E]
  } //[I-S]LN=69;[I-E]
} //[I-S]LN=70;[I-E]
//C-R:item2
class item2 extends Component { //[I-S]LN=0;[I-E]
  public String name; //[I-S]LN=1;[I-E]
  public Texture ui; //[I-S]LN=2;[I-E]
  private Texture newSprite; //[I-S]LN=3;[I-E]
  public String type; //[I-S]LN=4;[I-E]
  public int value; //[I-S]LN=5;[I-E]
  public int MaxTrag; //[I-S]LN=6;[I-E]
  public int CoordX, CoordY; //[I-S]LN=7;[I-E]
  private int Height =32, Width = 32; //[I-S]LN=8;[I-E]
  public VertexFile Vertex; //[I-S]LN=9;[I-E]
 //[I-S]LN=10;[I-E]
  public item2() {} //[I-S]LN=11;[I-E]
 //[I-S]LN=12;[I-E]
  public item2(String name, Texture ui, String type, int value, int MaxTrag, VertexFile Vertex) { //[I-S]LN=13;[I-E]
    this.name = name; //[I-S]LN=14;[I-E]
    this.ui = ui; //[I-S]LN=15;[I-E]
    this.type = type; //[I-S]LN=16;[I-E]
    this.value = value; //[I-S]LN=17;[I-E]
    this.MaxTrag = MaxTrag; //[I-S]LN=18;[I-E]
    this.Vertex = Vertex; //[I-S]LN=19;[I-E]
  }  //[I-S]LN=20;[I-E]
 //[I-S]LN=21;[I-E]
  public Texture getNewSprite() { //[I-S]LN=22;[I-E]
    if (ui == null) return null; //[I-S]LN=23;[I-E]
    if (newSprite == null) newSprite = getAtlas(); //[I-S]LN=24;[I-E]
    return newSprite; //[I-S]LN=25;[I-E]
  } //[I-S]LN=26;[I-E]
 //[I-S]LN=27;[I-E]
  public Texture getAtlas() { //[I-S]LN=28;[I-E]
    if (ui == null) return null; //[I-S]LN=29;[I-E]
    Texture newTexture = new Texture(Height, Width, true); //[I-S]LN=30;[I-E]
    //newTexture.setFilter(0); //[I-S]LN=31;[I-E]
    int eixoX = Height * CoordX; //[I-S]LN=32;[I-E]
    int eixoY = Width * CoordY; //[I-S]LN=33;[I-E]
    for (int y = 0; y < Height; y++) { //[I-S]LN=34;[I-E]
      for (int x = 0; x < Width; x++) { //[I-S]LN=35;[I-E]
        Color CheckColor = ui.get(x + eixoX, y + eixoY); //[I-S]LN=36;[I-E]
        newTexture.setPixel(x, y, CheckColor); //[I-S]LN=37;[I-E]
      } //[I-S]LN=38;[I-E]
    } //[I-S]LN=39;[I-E]
    newTexture.apply(); //[I-S]LN=40;[I-E]
    return newTexture; //[I-S]LN=41;[I-E]
  } //[I-S]LN=42;[I-E]
} //[I-S]LN=43;[I-E]
//C-R:git
class git extends Component { //[I-S]LN=0;[I-E]
  @Order(idx = -2) //[I-S]LN=1;[I-E]
  public String linkNamePasth; // "name do usuario do github/ nome do repositorio -->  usuario/repositorio" //[I-S]LN=2;[I-E]
 //[I-S]LN=3;[I-E]
  @Order(idx = -1) //[I-S]LN=4;[I-E]
  public String pasth; // "caminho da pasta" //[I-S]LN=5;[I-E]
 //[I-S]LN=6;[I-E]
  @Order(idx = 1) //[I-S]LN=7;[I-E]
  public String Commit = "comito"; // "menssagem ou etiqueta da modificação do arquivo" //[I-S]LN=8;[I-E]
 //[I-S]LN=9;[I-E]
  @Order(idx = 2) //[I-S]LN=10;[I-E]
  public String toke; // "codigo toke do github" //[I-S]LN=11;[I-E]
 //[I-S]LN=12;[I-E]
  private String Dir; //[I-S]LN=13;[I-E]
 //[I-S]LN=14;[I-E]
  private gitClone gitclone = new gitClone(); //[I-S]LN=15;[I-E]
  private gitPush gitpush = new gitPush(); //[I-S]LN=16;[I-E]
  private gitPushMult gitpushmult = new gitPushMult(); //[I-S]LN=17;[I-E]
  private gitCloneMult gitclonemult = new gitCloneMult(); //[I-S]LN=18;[I-E]
 //[I-S]LN=19;[I-E]
  @Order(idx = 0) //[I-S]LN=20;[I-E]
  public PropertiesButton DownLoad = //[I-S]LN=21;[I-E]
      new PropertiesButton( //[I-S]LN=22;[I-E]
          new PropertiesButtonListener() { //[I-S]LN=23;[I-E]
public             void onClicked() { //[I-S]LN=24;[I-E]
              DownLoad(); //[I-S]LN=25;[I-E]
            } //[I-S]LN=26;[I-E]
          }); //[I-S]LN=27;[I-E]
 //[I-S]LN=28;[I-E]
  @Order(idx = 3) //[I-S]LN=29;[I-E]
  public PropertiesButton UpLoad = //[I-S]LN=30;[I-E]
      new PropertiesButton( //[I-S]LN=31;[I-E]
          new PropertiesButtonListener() { //[I-S]LN=32;[I-E]
public             void onClicked() { //[I-S]LN=33;[I-E]
              UpLoad(); //[I-S]LN=34;[I-E]
            } //[I-S]LN=35;[I-E]
          }); //[I-S]LN=36;[I-E]
 //[I-S]LN=37;[I-E]
  public void DownLoad() { //[I-S]LN=38;[I-E]
    String DownloadUrl = null; //[I-S]LN=39;[I-E]
    boolean onoffFile = false; //[I-S]LN=40;[I-E]
    if (pasth.contains(".")) onoffFile = true; //[I-S]LN=41;[I-E]
    if (onoffFile && verifica(false, false)) { //[I-S]LN=42;[I-E]
      DownloadUrl = "https://raw.githubusercontent.com/" + linkNamePasth + "/main/Files/" + pasth; //[I-S]LN=43;[I-E]
      gitclone.GitClone(DownloadUrl, Dir); //[I-S]LN=44;[I-E]
 //[I-S]LN=45;[I-E]
      StringBuilder InforDate = new StringBuilder(); //[I-S]LN=46;[I-E]
      InforDate.append("{\n \"pasth\": \"").append(Dir).append("\",\n \"NameFile\": \"").append(pasth).append("\",\n \"Link\": \"").append(DownloadUrl).append("\"\n}"); //[I-S]LN=47;[I-E]
      Console.log(InforDate.toString()); //[I-S]LN=48;[I-E]
 //[I-S]LN=49;[I-E]
    } else if (verifica(true, false)) { //[I-S]LN=50;[I-E]
      DownloadUrl = "https://api.github.com/repos/" + linkNamePasth + "/contents/Files/" + pasth + "?ref=main"; //[I-S]LN=51;[I-E]
      File dir = new File(Dir); //[I-S]LN=52;[I-E]
      gitclonemult.gitPasthAll(gitclone, dir, DownloadUrl, toke); //[I-S]LN=53;[I-E]
    }  //[I-S]LN=54;[I-E]
  } //[I-S]LN=55;[I-E]
 //[I-S]LN=56;[I-E]
  public void UpLoad() { //[I-S]LN=57;[I-E]
    boolean onoffFile = false; //[I-S]LN=58;[I-E]
    if (pasth.contains(".")) onoffFile = true; //[I-S]LN=59;[I-E]
    if(!verifica(true, true)) return; //[I-S]LN=60;[I-E]
    if (onoffFile) { //[I-S]LN=61;[I-E]
      String API_Url = "https://api.github.com/repos/" + linkNamePasth + "/contents/Files/" + pasth + "?ref=main"; //[I-S]LN=62;[I-E]
      // busca o sha do file //[I-S]LN=63;[I-E]
 //[I-S]LN=64;[I-E]
      String shas = gitpush.getSha(API_Url, toke); //[I-S]LN=65;[I-E]
      gitpush.GitPush(API_Url, Commit, Dir, toke, shas); //[I-S]LN=66;[I-E]
 //[I-S]LN=67;[I-E]
      Console.log(!shas.isEmpty() ? "update" : "create"); //[I-S]LN=68;[I-E]
      Console.log("Link: " + API_Url); //[I-S]LN=69;[I-E]
    } else { //[I-S]LN=70;[I-E]
      File dir = new File(Dir); //[I-S]LN=71;[I-E]
      if (dir == null || !dir.exists()) return; //[I-S]LN=72;[I-E]
 //[I-S]LN=73;[I-E]
      // "lista todos oa file que existe" //[I-S]LN=74;[I-E]
      gitpushmult.UpVariaPasth(gitpush, dir, dir.getAbsolutePath() + "", linkNamePasth, Commit, pasth, toke); //[I-S]LN=75;[I-E]
    } //[I-S]LN=76;[I-E]
  } //[I-S]LN=77;[I-E]
 //[I-S]LN=78;[I-E]
  public boolean verifica(boolean token, boolean pont) { //[I-S]LN=79;[I-E]
    if (!linkNamePasth.contains("/") || linkNamePasth.isEmpty()) { //[I-S]LN=80;[I-E]
      Toast.showText("esta errado o link do \"nome do usuario do git\" / nome do repositorio", 1); //[I-S]LN=81;[I-E]
      return false; //[I-S]LN=82;[I-E]
    } //[I-S]LN=83;[I-E]
    if (pasth == null || pasth.isEmpty() || (pont && !new File(Directories.getProjectFolder() + "/Files/" + pasth).exists())) { //[I-S]LN=84;[I-E]
      Toast.showText("caminho para o arquivo esta faltando ou errado", 1); //[I-S]LN=85;[I-E]
      return false; //[I-S]LN=86;[I-E]
    } //[I-S]LN=87;[I-E]
    if (token && (toke == null || toke.length() < 20)) { //[I-S]LN=88;[I-E]
      Toast.showText("o toke esta vazio ou faltando", 1); //[I-S]LN=89;[I-E]
      return false; //[I-S]LN=90;[I-E]
    } //[I-S]LN=91;[I-E]
 //[I-S]LN=92;[I-E]
    Dir = Directories.getProjectFolder() + "Files/" + pasth; //[I-S]LN=93;[I-E]
    return true; //[I-S]LN=94;[I-E]
  } //[I-S]LN=95;[I-E]
} //[I-S]LN=96;[I-E]
//C-R:gitClone
class gitClone { //[I-S]LN=0;[I-E]
 //[I-S]LN=1;[I-E]
  public void GitClone(String link, String path) { //[I-S]LN=2;[I-E]
    InputStream in = null; //[I-S]LN=3;[I-E]
    BufferedInputStream bs = null; //[I-S]LN=4;[I-E]
    FileOutputStream fs = null; //[I-S]LN=5;[I-E]
    File addPasth = new File(path); //[I-S]LN=6;[I-E]
    File paretDir = addPasth.getParentFile(); //[I-S]LN=7;[I-E]
    if (paretDir != null && !paretDir.exists()) paretDir.mkdirs(); //[I-S]LN=8;[I-E]
 //[I-S]LN=9;[I-E]
    try { //[I-S]LN=10;[I-E]
      in = new URL(link).openStream(); //[I-S]LN=11;[I-E]
      bs = new BufferedInputStream(in); //[I-S]LN=12;[I-E]
      fs = new FileOutputStream(addPasth); //[I-S]LN=13;[I-E]
      byte[] date = new byte[1024]; //[I-S]LN=14;[I-E]
      int count; //[I-S]LN=15;[I-E]
      while ((count = bs.read(date, 0, 1024)) != -1) { //[I-S]LN=16;[I-E]
        fs.write(date, 0, count); //[I-S]LN=17;[I-E]
      } //[I-S]LN=18;[I-E]
      if (addPasth.length() == 0) Console.log("falho file void / no exists"); //[I-S]LN=19;[I-E]
    } catch (IOException e) { //[I-S]LN=20;[I-E]
      Console.log("erro no Download file: " + e.getMessage()); //[I-S]LN=21;[I-E]
    } finally { //[I-S]LN=22;[I-E]
      try { //[I-S]LN=23;[I-E]
        if (fs != null) fs.close(); //[I-S]LN=24;[I-E]
      } catch (IOException e) { //[I-S]LN=25;[I-E]
      } //[I-S]LN=26;[I-E]
      try { //[I-S]LN=27;[I-E]
        if (bs != null) bs.close(); //[I-S]LN=28;[I-E]
      } catch (IOException e) { //[I-S]LN=29;[I-E]
      } //[I-S]LN=30;[I-E]
      try { //[I-S]LN=31;[I-E]
        if (in != null) in.close(); //[I-S]LN=32;[I-E]
      } catch (IOException e) { //[I-S]LN=33;[I-E]
      } //[I-S]LN=34;[I-E]
    } //[I-S]LN=35;[I-E]
  } //[I-S]LN=36;[I-E]
} //[I-S]LN=37;[I-E]
//C-R:gitCloneMult
class gitCloneMult { //[I-S]LN=0;[I-E]
  private gitClone gitclone; //[I-S]LN=1;[I-E]
  private String link, token; //[I-S]LN=2;[I-E]
  private File Dir; //[I-S]LN=3;[I-E]
 //[I-S]LN=4;[I-E]
  public void gitPasthAll(gitClone gitclone, File Dir, String link, String token) { //[I-S]LN=5;[I-E]
    this.Dir = Dir; //[I-S]LN=6;[I-E]
    this.gitclone = gitclone; //[I-S]LN=7;[I-E]
    this.link = link; //[I-S]LN=8;[I-E]
    this.token = token; //[I-S]LN=9;[I-E]
    new AsyncTask( //[I-S]LN=10;[I-E]
        new AsyncRunnable() { //[I-S]LN=11;[I-E]
          public Object onBackground(Object input) { //[I-S]LN=12;[I-E]
            processFile(); //[I-S]LN=13;[I-E]
            return null; //[I-S]LN=14;[I-E]
          } //[I-S]LN=15;[I-E]
 //[I-S]LN=16;[I-E]
          public void onEngine(Object result) { //[I-S]LN=17;[I-E]
            Console.log("Download finalizado"); //[I-S]LN=18;[I-E]
          } //[I-S]LN=19;[I-E]
        }); //[I-S]LN=20;[I-E]
  } //[I-S]LN=21;[I-E]
 //[I-S]LN=22;[I-E]
  public void processFile() { //[I-S]LN=23;[I-E]
    try { //[I-S]LN=24;[I-E]
      URL url = new URL(link); //[I-S]LN=25;[I-E]
 //[I-S]LN=26;[I-E]
      HttpURLConnection com = (HttpURLConnection) url.openConnection(); //[I-S]LN=27;[I-E]
      com.setRequestMethod("GET"); //[I-S]LN=28;[I-E]
      com.setRequestProperty("Authorization", "token " + token); //[I-S]LN=29;[I-E]
      com.setRequestProperty("Accept", "application/vnd.github.v3+json"); //[I-S]LN=30;[I-E]
 //[I-S]LN=31;[I-E]
      int menss = com.getResponseCode(); //[I-S]LN=32;[I-E]
      InputStream input = (menss >= 400) ? com.getErrorStream() : com.getInputStream(); //[I-S]LN=33;[I-E]
      BufferedReader reader = new BufferedReader(new InputStreamReader(input)); //[I-S]LN=34;[I-E]
      StringBuilder result = new StringBuilder(); //[I-S]LN=35;[I-E]
      String line; //[I-S]LN=36;[I-E]
      while ((line = reader.readLine()) != null) result.append(line); //[I-S]LN=37;[I-E]
      input.close(); //[I-S]LN=38;[I-E]
      com.disconnect(); //[I-S]LN=39;[I-E]
 //[I-S]LN=40;[I-E]
      FileJson(result.toString()); //[I-S]LN=41;[I-E]
    } catch (IOException e) { //[I-S]LN=42;[I-E]
      Console.log("erro no json: " + e.getMessage()); //[I-S]LN=43;[I-E]
    } //[I-S]LN=44;[I-E]
  } //[I-S]LN=45;[I-E]
 //[I-S]LN=46;[I-E]
  public void FileJson(String jsons) { //[I-S]LN=47;[I-E]
    try { //[I-S]LN=48;[I-E]
      GitCloneJson[] file = (GitCloneJson[]) Json.fromJson(jsons, GitCloneJson[].class, true); //[I-S]LN=49;[I-E]
      for (GitCloneJson json : file) { //[I-S]LN=50;[I-E]
        if (json.type.equals("file")) { //[I-S]LN=51;[I-E]
          String destino = new File(Dir, json.name).getAbsolutePath(); //[I-S]LN=52;[I-E]
          gitclone.GitClone(json.download_url, destino); //[I-S]LN=53;[I-E]
          StringBuilder InforDate = new StringBuilder(); //[I-S]LN=54;[I-E]
          InforDate.append("{\n \"pasth\": \"").append(Dir).append("\",\n \"NameFile\": \"").append(destino).append("\",\n \"Link\": \"").append(json.download_url).append("\"\n}"); //[I-S]LN=55;[I-E]
          Console.log(InforDate.toString()); //[I-S]LN=56;[I-E]
        } //[I-S]LN=57;[I-E]
      }  //[I-S]LN=58;[I-E]
    } catch (Exception e) { //[I-S]LN=59;[I-E]
      Console.log("erro no Download file: " + e.getMessage()); //[I-S]LN=60;[I-E]
    } //[I-S]LN=61;[I-E]
  } //[I-S]LN=62;[I-E]
 //[I-S]LN=63;[I-E]
  public static class GitCloneJson { //[I-S]LN=64;[I-E]
    public String name; //[I-S]LN=65;[I-E]
    public String download_url; //[I-S]LN=66;[I-E]
    public String type; //[I-S]LN=67;[I-E]
    public String sha; //[I-S]LN=68;[I-E]
  } //[I-S]LN=69;[I-E]
} //[I-S]LN=70;[I-E]
//C-R:gitPush
class gitPush { //[I-S]LN=0;[I-E]
  public void GitPush(String link, String menssage, String pasth, String token, String sha) { //[I-S]LN=1;[I-E]
    try { //[I-S]LN=2;[I-E]
      byte[] date = readFile(pasth); //[I-S]LN=3;[I-E]
      String encode = Base64.getEncoder().encodeToString(date); //[I-S]LN=4;[I-E]
 //[I-S]LN=5;[I-E]
      // json que sera enviado para api.github //[I-S]LN=6;[I-E]
 //[I-S]LN=7;[I-E]
      StringBuilder json = new StringBuilder(); //[I-S]LN=8;[I-E]
      json.append("{\n  \"message\": \"").append(menssage).append("\",\n  \"content\": \"").append(encode).append("\",\n  \"branch\": \"main\""); //[I-S]LN=9;[I-E]
      if (sha != null && !sha.isEmpty()) json.append(",\n  \"sha\": \"").append(sha).append("\""); //[I-S]LN=10;[I-E]
      json.append("\n}"); //[I-S]LN=11;[I-E]
      Console.log("{\n  \"message\": \""+menssage+"\",\n  \"branch\": \"main\",\n  "+((sha != null && !sha.isEmpty())?"\"sha\": \""+sha:"")+"\"\n}"); //[I-S]LN=12;[I-E]
 //[I-S]LN=13;[I-E]
      URL url = new URL(link); //[I-S]LN=14;[I-E]
 //[I-S]LN=15;[I-E]
      // connect com o github //[I-S]LN=16;[I-E]
 //[I-S]LN=17;[I-E]
      HttpURLConnection com = (HttpURLConnection) url.openConnection(); //[I-S]LN=18;[I-E]
      com.setRequestMethod("PUT"); //[I-S]LN=19;[I-E]
      com.setDoOutput(true); //[I-S]LN=20;[I-E]
      com.setRequestProperty("Authorization", "token " + token); //[I-S]LN=21;[I-E]
      com.setRequestProperty("Content-Type", "application/json"); //[I-S]LN=22;[I-E]
 //[I-S]LN=23;[I-E]
      OutputStream output = com.getOutputStream(); //[I-S]LN=24;[I-E]
      output.write(json.toString().getBytes("UTF-8")); //[I-S]LN=25;[I-E]
      output.flush(); //[I-S]LN=26;[I-E]
      output.close(); //[I-S]LN=27;[I-E]
 //[I-S]LN=28;[I-E]
      /// vierifica se teve algum erro ao conectar como github //[I-S]LN=29;[I-E]
 //[I-S]LN=30;[I-E]
      int menss = com.getResponseCode(); //[I-S]LN=31;[I-E]
      Console.log(menss == 201 || menss == 200 ? "file enviado sucess" : "erro em algum folder"); //[I-S]LN=32;[I-E]
 //[I-S]LN=33;[I-E]
      InputStream input = (menss >= 400) ? com.getErrorStream() : com.getInputStream(); //[I-S]LN=34;[I-E]
      BufferedReader reader = new BufferedReader(new InputStreamReader(input)); //[I-S]LN=35;[I-E]
      StringBuilder result = new StringBuilder(); //[I-S]LN=36;[I-E]
      String line; //[I-S]LN=37;[I-E]
      while ((line = reader.readLine()) != null) result.append(line); //[I-S]LN=38;[I-E]
      Console.log("\nreposta: " + result.toString()); //[I-S]LN=39;[I-E]
      input.close(); //[I-S]LN=40;[I-E]
    } catch (Exception e) { //[I-S]LN=41;[I-E]
      Console.log(e); //[I-S]LN=42;[I-E]
    } //[I-S]LN=43;[I-E]
  } //[I-S]LN=44;[I-E]
 //[I-S]LN=45;[I-E]
  /// função que ve o tamanho do file que sera enviado para git para não manda faltando em byte //[I-S]LN=46;[I-E]
 //[I-S]LN=47;[I-E]
  public byte[] readFile(String pasth) { //[I-S]LN=48;[I-E]
    try { //[I-S]LN=49;[I-E]
      FileInputStream fs = new FileInputStream(pasth); //[I-S]LN=50;[I-E]
      ByteArrayOutputStream buffer = new ByteArrayOutputStream(); //[I-S]LN=51;[I-E]
      byte[] date = new byte[1024]; //[I-S]LN=52;[I-E]
      int read; //[I-S]LN=53;[I-E]
      while ((read = fs.read(date)) != -1) buffer.write(date, 0, read); //[I-S]LN=54;[I-E]
      fs.close(); //[I-S]LN=55;[I-E]
      return buffer.toByteArray(); //[I-S]LN=56;[I-E]
    } catch (Exception e) { //[I-S]LN=57;[I-E]
      Console.log(e); //[I-S]LN=58;[I-E]
    } //[I-S]LN=59;[I-E]
    return null; //[I-S]LN=60;[I-E]
  } //[I-S]LN=61;[I-E]
 //[I-S]LN=62;[I-E]
  /// funcão vai busca no json da api.github onde esta o "sha" do file existe no github //[I-S]LN=63;[I-E]
 //[I-S]LN=64;[I-E]
  public String getSha(String link, String token) { //[I-S]LN=65;[I-E]
    try { //[I-S]LN=66;[I-E]
      URL url = new URL(link); //[I-S]LN=67;[I-E]
 //[I-S]LN=68;[I-E]
      HttpURLConnection com = (HttpURLConnection) url.openConnection(); //[I-S]LN=69;[I-E]
      com.setRequestMethod("GET"); //[I-S]LN=70;[I-E]
      com.setRequestProperty("Authorization", "token " + token); //[I-S]LN=71;[I-E]
      com.setRequestProperty("Accept", "application/vnd.github.v3+json"); //[I-S]LN=72;[I-E]
 //[I-S]LN=73;[I-E]
      int menss = com.getResponseCode(); //[I-S]LN=74;[I-E]
      InputStream input = (menss >= 400) ? com.getErrorStream() : com.getInputStream(); //[I-S]LN=75;[I-E]
      BufferedReader reader = new BufferedReader(new InputStreamReader(input)); //[I-S]LN=76;[I-E]
      StringBuilder result = new StringBuilder(); //[I-S]LN=77;[I-E]
      String line; //[I-S]LN=78;[I-E]
      while ((line = reader.readLine()) != null) result.append(line); //[I-S]LN=79;[I-E]
      input.close(); //[I-S]LN=80;[I-E]
 //[I-S]LN=81;[I-E]
      GitPushJson json = (GitPushJson) Json.fromJson(result.toString(), GitPushJson.class, true); //[I-S]LN=82;[I-E]
 //[I-S]LN=83;[I-E]
      if (json != null && json.sha != null) return json.sha; //[I-S]LN=84;[I-E]
      else Console.log("falho o sha"); //[I-S]LN=85;[I-E]
      input.close(); //[I-S]LN=86;[I-E]
    } catch (Exception e) { //[I-S]LN=87;[I-E]
      Console.log(e); //[I-S]LN=88;[I-E]
    } //[I-S]LN=89;[I-E]
    return ""; //[I-S]LN=90;[I-E]
  } //[I-S]LN=91;[I-E]
 //[I-S]LN=92;[I-E]
  public static class GitPushJson { //[I-S]LN=93;[I-E]
    public String sha; //[I-S]LN=94;[I-E]
  }  //[I-S]LN=95;[I-E]
} //[I-S]LN=96;[I-E]
//C-R:gitPushMult
class gitPushMult { //[I-S]LN=0;[I-E]
  private gitPush gitpush; //[I-S]LN=1;[I-E]
  private String base, linkNamePasth, Commit, pasth, toke; //[I-S]LN=2;[I-E]
  private File dir; //[I-S]LN=3;[I-E]
  public void UpVariaPasth(gitPush gitpush, File dir, String base, String linkNamePasth, String Commit, String pasth, String toke) { //[I-S]LN=4;[I-E]
    this.gitpush = gitpush; //[I-S]LN=5;[I-E]
    this.base = base; //[I-S]LN=6;[I-E]
    this.linkNamePasth = linkNamePasth; //[I-S]LN=7;[I-E]
    this.Commit = Commit; //[I-S]LN=8;[I-E]
    this.pasth = pasth; //[I-S]LN=9;[I-E]
    this.toke = toke; //[I-S]LN=10;[I-E]
    this.dir = dir; //[I-S]LN=11;[I-E]
     //[I-S]LN=12;[I-E]
    new AsyncTask( //[I-S]LN=13;[I-E]
        new AsyncRunnable() { //[I-S]LN=14;[I-E]
          public Object onBackground(Object input) { //[I-S]LN=15;[I-E]
            processFile(); //[I-S]LN=16;[I-E]
            return null; //[I-S]LN=17;[I-E]
          } //[I-S]LN=18;[I-E]
 //[I-S]LN=19;[I-E]
          public void onEngine(Object result) { //[I-S]LN=20;[I-E]
            Console.log("upload Ended"); //[I-S]LN=21;[I-E]
          } //[I-S]LN=22;[I-E]
        }); //[I-S]LN=23;[I-E]
  } //[I-S]LN=24;[I-E]
 //[I-S]LN=25;[I-E]
  private void busca(File dir, List<File> resul) { //[I-S]LN=26;[I-E]
    File[] file = dir.listFiles(); //[I-S]LN=27;[I-E]
    if (file == null) return; //[I-S]LN=28;[I-E]
    for (File f : file) { //[I-S]LN=29;[I-E]
      if (f.isDirectory()) busca(f, resul); //[I-S]LN=30;[I-E]
      else resul.add(f); //[I-S]LN=31;[I-E]
    } //[I-S]LN=32;[I-E]
  } //[I-S]LN=33;[I-E]
 //[I-S]LN=34;[I-E]
  private File[] listFile(File dir) { //[I-S]LN=35;[I-E]
    List<File> resul = new ArrayList<File>(); //[I-S]LN=36;[I-E]
    busca(dir, resul); //[I-S]LN=37;[I-E]
    return resul.toArray(new File[0]); //[I-S]LN=38;[I-E]
  } //[I-S]LN=39;[I-E]
 //[I-S]LN=40;[I-E]
  private void processFile() { //[I-S]LN=41;[I-E]
    File[] file = listFile(dir); //[I-S]LN=42;[I-E]
    if (file == null) return; //[I-S]LN=43;[I-E]
    for (int i = 0; i < file.length; i++) { //[I-S]LN=44;[I-E]
      File f = file[i]; //[I-S]LN=45;[I-E]
      if (f.isDirectory()) continue; //[I-S]LN=46;[I-E]
      if (!f.getName().startsWith(".")) { //[I-S]LN=47;[I-E]
        String name = f.getAbsolutePath().replace(base, ""); //[I-S]LN=48;[I-E]
        String cominho = f.getAbsolutePath(); //[I-S]LN=49;[I-E]
        String API_Url = "https://api.github.com/repos/" + linkNamePasth + "/contents/Files/" + pasth + name + "?ref=main"; //[I-S]LN=50;[I-E]
 //[I-S]LN=51;[I-E]
        // busca o sha do file //[I-S]LN=52;[I-E]
 //[I-S]LN=53;[I-E]
        String shas = gitpush.getSha(API_Url, toke); //[I-S]LN=54;[I-E]
        gitpush.GitPush(API_Url, Commit, cominho, toke, shas); //[I-S]LN=55;[I-E]
 //[I-S]LN=56;[I-E]
        Console.log(!shas.isEmpty() ? "update" : "create"); //[I-S]LN=57;[I-E]
        Console.log("Link: " + API_Url); //[I-S]LN=58;[I-E]
      } //[I-S]LN=59;[I-E]
    }  //[I-S]LN=60;[I-E]
  } //[I-S]LN=61;[I-E]
} //[I-S]LN=62;[I-E]