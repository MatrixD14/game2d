package JAVARuntime;

import java.util.*; //[I-S]LN=3;[I-E]
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import java.util.zip.*;
import java.text.*;
import java.net.*;
import java.math.*;
import java.io.*;
import java.nio.*;
import java.time.*;
import java.time.chrono.*;
import java.time.format.*;
import java.time.temporal.*;
import java.time.zone.*;



public class _JContainer{}

//C-R:playe
class playe extends Component { //[I-S]LN=0;[I-E]
  private Vector2 joy = null, slid = null, slidmouse = null; //[I-S]LN=1;[I-E]
  private float speed = 5f, camx, camy, camrota = 1f; //[I-S]LN=2;[I-E]
  private SUIText fps; //[I-S]LN=3;[I-E]
  public WorldFile world, menu; //[I-S]LN=4;[I-E]
  private boolean playstop = false; //[I-S]LN=5;[I-E]
  private phisics fisica; //[I-S]LN=6;[I-E]
 //[I-S]LN=7;[I-E]
public   void start() { //[I-S]LN=8;[I-E]
    fps = WorldController.findObject("see").findComponent("suitext"); //[I-S]LN=9;[I-E]
    fisica = myObject.findComponent("phisics"); //[I-S]LN=10;[I-E]
    joy = Input.getAxisValue("joy"); //[I-S]LN=11;[I-E]
    slid = Input.getAxisValue("slid"); //[I-S]LN=12;[I-E]
    slidmouse = new Vector2(Input.mouse.getSlideX(), Input.mouse.getSlideY()); //[I-S]LN=13;[I-E]
  } //[I-S]LN=14;[I-E]
 //[I-S]LN=15;[I-E]
public   void repeat() { //[I-S]LN=16;[I-E]
    sairgame(); //[I-S]LN=17;[I-E]
    mudamudo(); //[I-S]LN=18;[I-E]
    if (playstop) return; //[I-S]LN=19;[I-E]
    fps.setText("FPS: " + (int) (1 / Time.deltaTime())); //[I-S]LN=20;[I-E]
    cameMouse(slid); //[I-S]LN=21;[I-E]
move(joy.getX(), joy.getY()); //[I-S]LN=22;[I-E]
  } //[I-S]LN=23;[I-E]
 //[I-S]LN=24;[I-E]
  private void cameMouse(Vector2 slide) { //[I-S]LN=25;[I-E]
camx += slide.getX() * camrota; //[I-S]LN=26;[I-E]
camy = Math.clamp(-90, camy += slide.getY() * camrota, 90); //[I-S]LN=27;[I-E]
    myObject.getRotation().selfLookTo(new Vector3(Math.sin(-camx), 0, Math.cos(-camx))); //[I-S]LN=28;[I-E]
    myObject.findChildObject("see_player").getRotation().selfLookTo(new Vector3(0, Math.sin(-camy), Math.cos(-camy))); //[I-S]LN=29;[I-E]
  } //[I-S]LN=30;[I-E]
 //[I-S]LN=31;[I-E]
  private void move(float x, float y) { //[I-S]LN=32;[I-E]
    myObject.moveInSeconds(-(x * fisica.moveX()), 0, y * fisica.moveZ()); //[I-S]LN=33;[I-E]
  }  //[I-S]LN=34;[I-E]
 //[I-S]LN=35;[I-E]
  private void sairgame() { //[I-S]LN=36;[I-E]
    if (Input.isKeyDown("sair")) GameController.quit(); //[I-S]LN=37;[I-E]
    if (Input.isKeyDown("playStop")) playstop = !playstop; //[I-S]LN=38;[I-E]
    if (playstop) { //[I-S]LN=39;[I-E]
      Time.setTimeScale(0); //[I-S]LN=40;[I-E]
    } else Time.setTimeScale(1); //[I-S]LN=41;[I-E]
  } //[I-S]LN=42;[I-E]
 //[I-S]LN=43;[I-E]
  private void mudamudo() { //[I-S]LN=44;[I-E]
    if (Input.isKeyDown("reload")) WorldController.loadWorld(world); //[I-S]LN=45;[I-E]
    //if (Input.isKeyDown("menu")) WorldController.loadWorld(menu); //[I-S]LN=46;[I-E]
  } //[I-S]LN=47;[I-E]
} //[I-S]LN=48;[I-E]
//C-R:git
class git extends Component { //[I-S]LN=0;[I-E]
  @Order(idx = -2) //[I-S]LN=1;[I-E]
  public String linkNamePasth; // "name do usuario do github/ nome do repositorio -->  usuario/repositorio" //[I-S]LN=2;[I-E]
 //[I-S]LN=3;[I-E]
  @Order(idx = -1) //[I-S]LN=4;[I-E]
  public String pasth; // "caminho da pasta" //[I-S]LN=5;[I-E]
 //[I-S]LN=6;[I-E]
  @Order(idx = 1) //[I-S]LN=7;[I-E]
  public String Commit = "comito"; // "menssagem ou etiqueta da modificação do arquivo" //[I-S]LN=8;[I-E]
 //[I-S]LN=9;[I-E]
  @Order(idx = 2) //[I-S]LN=10;[I-E]
  public String toke; // "codigo toke do github" //[I-S]LN=11;[I-E]
 //[I-S]LN=12;[I-E]
  private String Dir; //[I-S]LN=13;[I-E]
 //[I-S]LN=14;[I-E]
  private gitClone gitclone = new gitClone(); //[I-S]LN=15;[I-E]
  private gitPush gitpush = new gitPush(); //[I-S]LN=16;[I-E]
  private gitPushMult gitpushmult = new gitPushMult(); //[I-S]LN=17;[I-E]
  private gitCloneMult gitclonemult = new gitCloneMult(); //[I-S]LN=18;[I-E]
 //[I-S]LN=19;[I-E]
  @Order(idx = 0) //[I-S]LN=20;[I-E]
  public PropertiesButton DownLoad = //[I-S]LN=21;[I-E]
      new PropertiesButton( //[I-S]LN=22;[I-E]
          new PropertiesButtonListener() { //[I-S]LN=23;[I-E]
public             void onClicked() { //[I-S]LN=24;[I-E]
              DownLoad(); //[I-S]LN=25;[I-E]
            } //[I-S]LN=26;[I-E]
          }); //[I-S]LN=27;[I-E]
 //[I-S]LN=28;[I-E]
  @Order(idx = 3) //[I-S]LN=29;[I-E]
  public PropertiesButton UpLoad = //[I-S]LN=30;[I-E]
      new PropertiesButton( //[I-S]LN=31;[I-E]
          new PropertiesButtonListener() { //[I-S]LN=32;[I-E]
public             void onClicked() { //[I-S]LN=33;[I-E]
              UpLoad(); //[I-S]LN=34;[I-E]
            } //[I-S]LN=35;[I-E]
          }); //[I-S]LN=36;[I-E]
 //[I-S]LN=37;[I-E]
  public void DownLoad() { //[I-S]LN=38;[I-E]
    boolean onoffFile = false; //[I-S]LN=39;[I-E]
    if (pasth.contains(".")) onoffFile = true; //[I-S]LN=40;[I-E]
    if (!verifica(false, false)) return; //[I-S]LN=41;[I-E]
    if (onoffFile) { //[I-S]LN=42;[I-E]
      String DownloadUrl = "https://raw.githubusercontent.com/" + linkNamePasth + "/main/Files/" + pasth; //[I-S]LN=43;[I-E]
      gitclone.GitClone(DownloadUrl, Dir); //[I-S]LN=44;[I-E]
 //[I-S]LN=45;[I-E]
      StringBuilder InforDate = new StringBuilder(); //[I-S]LN=46;[I-E]
      InforDate.append("{\n \"pasth\": \"").append(Dir).append("\",\n \"NameFile\": \"").append(pasth).append("\",\n \"Link\": \"").append(DownloadUrl).append("\"\n}"); //[I-S]LN=47;[I-E]
      Console.log(InforDate.toString()); //[I-S]LN=48;[I-E]
    } else { //[I-S]LN=49;[I-E]
        String DownloadUrl = "https://api.github.com/repos/" + linkNamePasth + "/contents/Files/" + pasth + "?ref=main"; //[I-S]LN=50;[I-E]
        File dir = new File(Dir); //[I-S]LN=51;[I-E]
        gitclonemult.gitPasthAll(gitclone,dir,DownloadUrl,toke); //[I-S]LN=52;[I-E]
      Console.log("test"); //[I-S]LN=53;[I-E]
    } //[I-S]LN=54;[I-E]
  }  //[I-S]LN=55;[I-E]
 //[I-S]LN=56;[I-E]
  public void UpLoad() { //[I-S]LN=57;[I-E]
    boolean onoffFile = false; //[I-S]LN=58;[I-E]
    if (pasth.contains(".")) onoffFile = true; //[I-S]LN=59;[I-E]
    if (onoffFile && verifica(true, true)) { //[I-S]LN=60;[I-E]
      String API_Url = "https://api.github.com/repos/" + linkNamePasth + "/contents/Files/" + pasth + "?ref=main"; //[I-S]LN=61;[I-E]
      // busca o sha do file //[I-S]LN=62;[I-E]
 //[I-S]LN=63;[I-E]
      String shas = gitpush.getSha(API_Url, toke); //[I-S]LN=64;[I-E]
      gitpush.GitPush(API_Url, Commit, Dir, toke, shas); //[I-S]LN=65;[I-E]
 //[I-S]LN=66;[I-E]
      Console.log(!shas.isEmpty() ? "update" : "create"); //[I-S]LN=67;[I-E]
      Console.log("Link: " + API_Url); //[I-S]LN=68;[I-E]
    } else if (verifica(true, false)) { //[I-S]LN=69;[I-E]
      File dir = new File(Dir); //[I-S]LN=70;[I-E]
      if (dir == null || !dir.exists()) return; //[I-S]LN=71;[I-E]
 //[I-S]LN=72;[I-E]
      // "lista todos oa file que existe" //[I-S]LN=73;[I-E]
      gitpushmult.UpVariaPasth(gitpush, dir, dir.getAbsolutePath() + "", linkNamePasth, Commit, pasth, toke); //[I-S]LN=74;[I-E]
    } //[I-S]LN=75;[I-E]
  } //[I-S]LN=76;[I-E]
 //[I-S]LN=77;[I-E]
  public boolean verifica(boolean token, boolean pont) { //[I-S]LN=78;[I-E]
    if (!linkNamePasth.contains("/") || linkNamePasth.isEmpty()) { //[I-S]LN=79;[I-E]
      Toast.showText("esta errado o link do \"nome do usuario do git\" / nome do repositorio", 1); //[I-S]LN=80;[I-E]
      return false; //[I-S]LN=81;[I-E]
    } //[I-S]LN=82;[I-E]
    if (pasth == null || pasth.isEmpty() || (pont && !new File(Directories.getProjectFolder() + "/Files/" + pasth).isFile())) { //[I-S]LN=83;[I-E]
      Toast.showText("caminho para o arquivo esta faltando ou errado", 1); //[I-S]LN=84;[I-E]
      return false; //[I-S]LN=85;[I-E]
    } //[I-S]LN=86;[I-E]
    if (token && (toke == null || toke.length() < 20)) { //[I-S]LN=87;[I-E]
      Toast.showText("o toke esta vazio ou faltando", 1); //[I-S]LN=88;[I-E]
      return false; //[I-S]LN=89;[I-E]
    } //[I-S]LN=90;[I-E]
 //[I-S]LN=91;[I-E]
    Dir = Directories.getProjectFolder() + "Files/" + pasth; //[I-S]LN=92;[I-E]
    return true; //[I-S]LN=93;[I-E]
  } //[I-S]LN=94;[I-E]
} //[I-S]LN=95;[I-E]
//C-R:gitClone
class gitClone { //[I-S]LN=0;[I-E]
 //[I-S]LN=1;[I-E]
  public void GitClone(String link, String path) { //[I-S]LN=2;[I-E]
    InputStream in = null; //[I-S]LN=3;[I-E]
    BufferedInputStream bs = null; //[I-S]LN=4;[I-E]
    FileOutputStream fs = null; //[I-S]LN=5;[I-E]
    File addPasth = new File(path); //[I-S]LN=6;[I-E]
    File paretDir = addPasth.getParentFile(); //[I-S]LN=7;[I-E]
    if (paretDir != null && !paretDir.exists()) paretDir.mkdirs(); //[I-S]LN=8;[I-E]
 //[I-S]LN=9;[I-E]
    try { //[I-S]LN=10;[I-E]
      in = new URL(link).openStream(); //[I-S]LN=11;[I-E]
      bs = new BufferedInputStream(in); //[I-S]LN=12;[I-E]
      fs = new FileOutputStream(addPasth); //[I-S]LN=13;[I-E]
      byte[] date = new byte[1024]; //[I-S]LN=14;[I-E]
      int count; //[I-S]LN=15;[I-E]
      while ((count = bs.read(date, 0, 1024)) != -1) { //[I-S]LN=16;[I-E]
        fs.write(date, 0, count); //[I-S]LN=17;[I-E]
      } //[I-S]LN=18;[I-E]
      if (addPasth.length() == 0) Console.log("falho file void / no exists"); //[I-S]LN=19;[I-E]
    } catch (IOException e) { //[I-S]LN=20;[I-E]
      Console.log("erro no Download file: " + e.getMessage()); //[I-S]LN=21;[I-E]
    } finally { //[I-S]LN=22;[I-E]
      try { //[I-S]LN=23;[I-E]
        if (fs != null) fs.close(); //[I-S]LN=24;[I-E]
      } catch (IOException e) { //[I-S]LN=25;[I-E]
      } //[I-S]LN=26;[I-E]
      try { //[I-S]LN=27;[I-E]
        if (bs != null) bs.close(); //[I-S]LN=28;[I-E]
      } catch (IOException e) { //[I-S]LN=29;[I-E]
      } //[I-S]LN=30;[I-E]
      try { //[I-S]LN=31;[I-E]
        if (in != null) in.close(); //[I-S]LN=32;[I-E]
      } catch (IOException e) { //[I-S]LN=33;[I-E]
      } //[I-S]LN=34;[I-E]
    } //[I-S]LN=35;[I-E]
  } //[I-S]LN=36;[I-E]
} //[I-S]LN=37;[I-E]
//C-R:gitPush
class gitPush { //[I-S]LN=0;[I-E]
  public void GitPush(String link, String menssage, String pasth, String token, String sha) { //[I-S]LN=1;[I-E]
    try { //[I-S]LN=2;[I-E]
      byte[] date = readFile(pasth); //[I-S]LN=3;[I-E]
      String encode = Base64.getEncoder().encodeToString(date); //[I-S]LN=4;[I-E]
 //[I-S]LN=5;[I-E]
      // json que sera enviado para api.github //[I-S]LN=6;[I-E]
 //[I-S]LN=7;[I-E]
      StringBuilder json = new StringBuilder(); //[I-S]LN=8;[I-E]
      json.append("{\n  \"message\": \"").append(menssage).append("\",\n  \"content\": \"").append(encode).append("\",\n  \"branch\": \"main\""); //[I-S]LN=9;[I-E]
      if (sha != null && !sha.isEmpty()) json.append(",\n  \"sha\": \"").append(sha).append("\""); //[I-S]LN=10;[I-E]
      json.append("\n}"); //[I-S]LN=11;[I-E]
      Console.log("{\n  \"message\": \""+menssage+"\",\n  \"branch\": \"main\",\n  "+((sha != null && !sha.isEmpty())?"\"sha\": \""+sha:"")+"\"\n}"); //[I-S]LN=12;[I-E]
 //[I-S]LN=13;[I-E]
      URL url = new URL(link); //[I-S]LN=14;[I-E]
 //[I-S]LN=15;[I-E]
      // connect com o github //[I-S]LN=16;[I-E]
 //[I-S]LN=17;[I-E]
      HttpURLConnection com = (HttpURLConnection) url.openConnection(); //[I-S]LN=18;[I-E]
      com.setRequestMethod("PUT"); //[I-S]LN=19;[I-E]
      com.setDoOutput(true); //[I-S]LN=20;[I-E]
      com.setRequestProperty("Authorization", "token " + token); //[I-S]LN=21;[I-E]
      com.setRequestProperty("Content-Type", "application/json"); //[I-S]LN=22;[I-E]
 //[I-S]LN=23;[I-E]
      OutputStream output = com.getOutputStream(); //[I-S]LN=24;[I-E]
      output.write(json.toString().getBytes("UTF-8")); //[I-S]LN=25;[I-E]
      output.flush(); //[I-S]LN=26;[I-E]
      output.close(); //[I-S]LN=27;[I-E]
 //[I-S]LN=28;[I-E]
      /// vierifica se teve algum erro ao conectar como github //[I-S]LN=29;[I-E]
 //[I-S]LN=30;[I-E]
      int menss = com.getResponseCode(); //[I-S]LN=31;[I-E]
      Console.log(menss == 201 || menss == 200 ? "file enviado sucess" : "erro em algum folder"); //[I-S]LN=32;[I-E]
 //[I-S]LN=33;[I-E]
      InputStream input = (menss >= 400) ? com.getErrorStream() : com.getInputStream(); //[I-S]LN=34;[I-E]
      BufferedReader reader = new BufferedReader(new InputStreamReader(input)); //[I-S]LN=35;[I-E]
      StringBuilder result = new StringBuilder(); //[I-S]LN=36;[I-E]
      String line; //[I-S]LN=37;[I-E]
      while ((line = reader.readLine()) != null) result.append(line); //[I-S]LN=38;[I-E]
      Console.log("\nreposta: " + result.toString()); //[I-S]LN=39;[I-E]
      input.close(); //[I-S]LN=40;[I-E]
    } catch (Exception e) { //[I-S]LN=41;[I-E]
      Console.log(e); //[I-S]LN=42;[I-E]
    } //[I-S]LN=43;[I-E]
  } //[I-S]LN=44;[I-E]
 //[I-S]LN=45;[I-E]
  /// função que ve o tamanho do file que sera enviado para git para não manda faltando em byte //[I-S]LN=46;[I-E]
 //[I-S]LN=47;[I-E]
  public byte[] readFile(String pasth) { //[I-S]LN=48;[I-E]
    try { //[I-S]LN=49;[I-E]
      FileInputStream fs = new FileInputStream(pasth); //[I-S]LN=50;[I-E]
      ByteArrayOutputStream buffer = new ByteArrayOutputStream(); //[I-S]LN=51;[I-E]
      byte[] date = new byte[1024]; //[I-S]LN=52;[I-E]
      int read; //[I-S]LN=53;[I-E]
      while ((read = fs.read(date)) != -1) buffer.write(date, 0, read); //[I-S]LN=54;[I-E]
      fs.close(); //[I-S]LN=55;[I-E]
      return buffer.toByteArray(); //[I-S]LN=56;[I-E]
    } catch (Exception e) { //[I-S]LN=57;[I-E]
      Console.log(e); //[I-S]LN=58;[I-E]
    } //[I-S]LN=59;[I-E]
    return null; //[I-S]LN=60;[I-E]
  } //[I-S]LN=61;[I-E]
 //[I-S]LN=62;[I-E]
  /// funcão vai busca no json da api.github onde esta o "sha" do file existe no github //[I-S]LN=63;[I-E]
 //[I-S]LN=64;[I-E]
  public String getSha(String link, String token) { //[I-S]LN=65;[I-E]
    try { //[I-S]LN=66;[I-E]
      URL url = new URL(link); //[I-S]LN=67;[I-E]
 //[I-S]LN=68;[I-E]
      HttpURLConnection com = (HttpURLConnection) url.openConnection(); //[I-S]LN=69;[I-E]
      com.setRequestMethod("GET"); //[I-S]LN=70;[I-E]
      com.setRequestProperty("Authorization", "token " + token); //[I-S]LN=71;[I-E]
      com.setRequestProperty("Accept", "application/vnd.github.v3+json"); //[I-S]LN=72;[I-E]
 //[I-S]LN=73;[I-E]
      int menss = com.getResponseCode(); //[I-S]LN=74;[I-E]
      InputStream input = (menss >= 400) ? com.getErrorStream() : com.getInputStream(); //[I-S]LN=75;[I-E]
      BufferedReader reader = new BufferedReader(new InputStreamReader(input)); //[I-S]LN=76;[I-E]
      StringBuilder result = new StringBuilder(); //[I-S]LN=77;[I-E]
      String line; //[I-S]LN=78;[I-E]
      while ((line = reader.readLine()) != null) result.append(line); //[I-S]LN=79;[I-E]
      input.close(); //[I-S]LN=80;[I-E]
 //[I-S]LN=81;[I-E]
      GitPushJson json = (GitPushJson) Json.fromJson(result.toString(), GitPushJson.class, true); //[I-S]LN=82;[I-E]
 //[I-S]LN=83;[I-E]
      if (json != null && json.sha != null) return json.sha; //[I-S]LN=84;[I-E]
      else Console.log("falho o sha"); //[I-S]LN=85;[I-E]
      input.close(); //[I-S]LN=86;[I-E]
    } catch (Exception e) { //[I-S]LN=87;[I-E]
      Console.log(e); //[I-S]LN=88;[I-E]
    } //[I-S]LN=89;[I-E]
    return ""; //[I-S]LN=90;[I-E]
  } //[I-S]LN=91;[I-E]
 //[I-S]LN=92;[I-E]
  public static class GitPushJson { //[I-S]LN=93;[I-E]
    public String sha; //[I-S]LN=94;[I-E]
  }  //[I-S]LN=95;[I-E]
} //[I-S]LN=96;[I-E]
//C-R:gitPushMult
class gitPushMult { //[I-S]LN=0;[I-E]
  private gitPush gitpush; //[I-S]LN=1;[I-E]
  private String base, linkNamePasth, Commit, pasth, toke; //[I-S]LN=2;[I-E]
  private File dir; //[I-S]LN=3;[I-E]
  public void UpVariaPasth(gitPush gitpush, File dir, String base, String linkNamePasth, String Commit, String pasth, String toke) { //[I-S]LN=4;[I-E]
    this.gitpush = gitpush; //[I-S]LN=5;[I-E]
    this.base = base; //[I-S]LN=6;[I-E]
    this.linkNamePasth = linkNamePasth; //[I-S]LN=7;[I-E]
    this.Commit = Commit; //[I-S]LN=8;[I-E]
    this.pasth = pasth; //[I-S]LN=9;[I-E]
    this.toke = toke; //[I-S]LN=10;[I-E]
    this.dir = dir; //[I-S]LN=11;[I-E]
     //[I-S]LN=12;[I-E]
    new AsyncTask( //[I-S]LN=13;[I-E]
        new AsyncRunnable() { //[I-S]LN=14;[I-E]
          public Object onBackground(Object input) { //[I-S]LN=15;[I-E]
            processFile(); //[I-S]LN=16;[I-E]
            return null; //[I-S]LN=17;[I-E]
          } //[I-S]LN=18;[I-E]
 //[I-S]LN=19;[I-E]
          public void onEngine(Object result) { //[I-S]LN=20;[I-E]
            Console.log("upload Ended"); //[I-S]LN=21;[I-E]
          } //[I-S]LN=22;[I-E]
        }); //[I-S]LN=23;[I-E]
  } //[I-S]LN=24;[I-E]
 //[I-S]LN=25;[I-E]
  private void busca(File dir, List<File> resul) { //[I-S]LN=26;[I-E]
    File[] file = dir.listFiles(); //[I-S]LN=27;[I-E]
    if (file == null) return; //[I-S]LN=28;[I-E]
    for (File f : file) { //[I-S]LN=29;[I-E]
      if (f.isDirectory()) busca(f, resul); //[I-S]LN=30;[I-E]
      else resul.add(f); //[I-S]LN=31;[I-E]
    } //[I-S]LN=32;[I-E]
  } //[I-S]LN=33;[I-E]
 //[I-S]LN=34;[I-E]
  private File[] listFile(File dir) { //[I-S]LN=35;[I-E]
    List<File> resul = new ArrayList<File>(); //[I-S]LN=36;[I-E]
    busca(dir, resul); //[I-S]LN=37;[I-E]
    return resul.toArray(new File[0]); //[I-S]LN=38;[I-E]
  } //[I-S]LN=39;[I-E]
 //[I-S]LN=40;[I-E]
  private void processFile() { //[I-S]LN=41;[I-E]
    File[] file = listFile(dir); //[I-S]LN=42;[I-E]
    if (file == null) return; //[I-S]LN=43;[I-E]
    for (int i = 0; i < file.length; i++) { //[I-S]LN=44;[I-E]
      File f = file[i]; //[I-S]LN=45;[I-E]
      if (f.isDirectory()) continue; //[I-S]LN=46;[I-E]
      if (!f.getName().startsWith(".")) { //[I-S]LN=47;[I-E]
        String name = f.getAbsolutePath().replace(base, ""); //[I-S]LN=48;[I-E]
        String cominho = f.getAbsolutePath(); //[I-S]LN=49;[I-E]
        String API_Url = "https://api.github.com/repos/" + linkNamePasth + "/contents/Files/" + pasth + name + "?ref=main"; //[I-S]LN=50;[I-E]
 //[I-S]LN=51;[I-E]
        // busca o sha do file //[I-S]LN=52;[I-E]
 //[I-S]LN=53;[I-E]
        String shas = gitpush.getSha(API_Url, toke); //[I-S]LN=54;[I-E]
        gitpush.GitPush(API_Url, Commit, cominho, toke, shas); //[I-S]LN=55;[I-E]
 //[I-S]LN=56;[I-E]
        Console.log(!shas.isEmpty() ? "update" : "create"); //[I-S]LN=57;[I-E]
        Console.log("Link: " + API_Url); //[I-S]LN=58;[I-E]
      } //[I-S]LN=59;[I-E]
    }  //[I-S]LN=60;[I-E]
  } //[I-S]LN=61;[I-E]
} //[I-S]LN=62;[I-E]
//C-R:gitCloneMult
class gitCloneMult { //[I-S]LN=0;[I-E]
  private gitClone gitclone; //[I-S]LN=1;[I-E]
  private String link, token; //[I-S]LN=2;[I-E]
  private File Dir; //[I-S]LN=3;[I-E]
 //[I-S]LN=4;[I-E]
  public void gitPasthAll(gitClone gitclone, File Dir, String link, String token) { //[I-S]LN=5;[I-E]
    this.Dir = Dir; //[I-S]LN=6;[I-E]
    this.gitclone = gitclone; //[I-S]LN=7;[I-E]
    this.link = link; //[I-S]LN=8;[I-E]
    this.token = token; //[I-S]LN=9;[I-E]
    new AsyncTask( //[I-S]LN=10;[I-E]
        new AsyncRunnable() { //[I-S]LN=11;[I-E]
          public Object onBackground(Object input) { //[I-S]LN=12;[I-E]
            processFile(); //[I-S]LN=13;[I-E]
            return null; //[I-S]LN=14;[I-E]
          } //[I-S]LN=15;[I-E]
 //[I-S]LN=16;[I-E]
          public void onEngine(Object result) {} //[I-S]LN=17;[I-E]
        }); //[I-S]LN=18;[I-E]
  }  //[I-S]LN=19;[I-E]
 //[I-S]LN=20;[I-E]
  public void processFile() { //[I-S]LN=21;[I-E]
    try { //[I-S]LN=22;[I-E]
      URL url = new URL(link); //[I-S]LN=23;[I-E]
 //[I-S]LN=24;[I-E]
      HttpURLConnection com = (HttpURLConnection) url.openConnection(); //[I-S]LN=25;[I-E]
      com.setRequestMethod("GET"); //[I-S]LN=26;[I-E]
      com.setRequestProperty("Authorization", "token " + token); //[I-S]LN=27;[I-E]
      com.setRequestProperty("Accept", "application/vnd.github.v3+json"); //[I-S]LN=28;[I-E]
 //[I-S]LN=29;[I-E]
      int menss = com.getResponseCode(); //[I-S]LN=30;[I-E]
      InputStream input = (menss >= 400) ? com.getErrorStream() : com.getInputStream(); //[I-S]LN=31;[I-E]
      BufferedReader reader = new BufferedReader(new InputStreamReader(input)); //[I-S]LN=32;[I-E]
      StringBuilder result = new StringBuilder(); //[I-S]LN=33;[I-E]
      String line; //[I-S]LN=34;[I-E]
      while ((line = reader.readLine()) != null) result.append(line); //[I-S]LN=35;[I-E]
      input.close(); //[I-S]LN=36;[I-E]
      com.disconnect(); //[I-S]LN=37;[I-E]
 //[I-S]LN=38;[I-E]
      FileJson(result.toString()); //[I-S]LN=39;[I-E]
    } catch (IOException e) { //[I-S]LN=40;[I-E]
    } //[I-S]LN=41;[I-E]
  } //[I-S]LN=42;[I-E]
 //[I-S]LN=43;[I-E]
  public void FileJson(String jsons) { //[I-S]LN=44;[I-E]
    if (jsons.startsWith("[")) jsons = jsons.substring(1); //[I-S]LN=45;[I-E]
    if (jsons.endsWith("]")) jsons = jsons.substring(0, jsons.length() - 1); //[I-S]LN=46;[I-E]
 //[I-S]LN=47;[I-E]
    String[] file = jsons.split("\\},\\{"); //[I-S]LN=48;[I-E]
    for (int i = 0; i < file.length; i++) { //[I-S]LN=49;[I-E]
      String obj = file[i]; //[I-S]LN=50;[I-E]
      if (!obj.startsWith("{")) obj = "{" + obj; //[I-S]LN=51;[I-E]
      if (!obj.endsWith("{")) obj = obj + "}"; //[I-S]LN=52;[I-E]
      try { //[I-S]LN=53;[I-E]
        GitCloneJson json = (GitCloneJson) Json.fromJson(obj, GitCloneJson.class, true); //[I-S]LN=54;[I-E]
        if (json.type.equals("file")) { //[I-S]LN=55;[I-E]
          String destino = new File(Dir, json.name).getAbsolutePath(); //[I-S]LN=56;[I-E]
          gitclone.GitClone(json.download_url, destino); //[I-S]LN=57;[I-E]
        } //[I-S]LN=58;[I-E]
 //[I-S]LN=59;[I-E]
      } catch (Exception e) { //[I-S]LN=60;[I-E]
      } //[I-S]LN=61;[I-E]
    } //[I-S]LN=62;[I-E]
  } //[I-S]LN=63;[I-E]
 //[I-S]LN=64;[I-E]
  public static class GitCloneJson { //[I-S]LN=65;[I-E]
    public String name; //[I-S]LN=66;[I-E]
    public String download_url; //[I-S]LN=67;[I-E]
    public String type; //[I-S]LN=68;[I-E]
    public String sha; //[I-S]LN=69;[I-E]
  } //[I-S]LN=70;[I-E]
} //[I-S]LN=71;[I-E]
//C-R:chunkgen
class chunkgen extends Component { //[I-S]LN=0;[I-E]
  public class object { //[I-S]LN=1;[I-E]
    public SpatialObject TerrCriate(float posx, float posy) { //[I-S]LN=2;[I-E]
      SpatialObject Obj = new SpatialObject("chuck " + posx + posy); //[I-S]LN=3;[I-E]
      Obj.setStatic(true); //[I-S]LN=4;[I-E]
      Obj.addComponent(new ModelRenderer()); //[I-S]LN=5;[I-E]
      Obj.addComponent(new TerreController()); //[I-S]LN=6;[I-E]
      Obj.setPosition(posx, 0, posy); //[I-S]LN=7;[I-E]
      return Obj; //[I-S]LN=8;[I-E]
    }  //[I-S]LN=9;[I-E]
  } //[I-S]LN=10;[I-E]
 //[I-S]LN=11;[I-E]
  @Hide public float waterlevel = .5f; //[I-S]LN=12;[I-E]
  @Hide public int chunks = 2, width = 16, seed; //[I-S]LN=13;[I-E]
  public float scale, heightscale, valuelog; //[I-S]LN=14;[I-E]
  public MaterialFile TerrMate, WaterMate; //[I-S]LN=15;[I-E]
  @Hide public chunkgen.object object; //[I-S]LN=16;[I-E]
  public List<ObjectFile> trees = new ArrayList<ObjectFile>(); //[I-S]LN=17;[I-E]
  private Vector3 myposGlobal; //[I-S]LN=18;[I-E]
  private int lastChuckX = Integer.MIN_VALUE, lastChuckZ = Integer.MIN_VALUE; //[I-S]LN=19;[I-E]
  private int myposxs, myposzs; //[I-S]LN=20;[I-E]
  public HashMap<Long, SpatialObject> chunck = new HashMap<Long, SpatialObject>(); //[I-S]LN=21;[I-E]
  public Queue<Long> process = new ArrayDeque<Long>(); //[I-S]LN=22;[I-E]
 //[I-S]LN=23;[I-E]
  @Override //[I-S]LN=24;[I-E]
public   void start() { //[I-S]LN=25;[I-E]
    object = new chunkgen.object(); //[I-S]LN=26;[I-E]
    seed = Random.range(0, 500); //[I-S]LN=27;[I-E]
  } //[I-S]LN=28;[I-E]
 //[I-S]LN=29;[I-E]
  @Override //[I-S]LN=30;[I-E]
public   void repeat() { //[I-S]LN=31;[I-E]
    posplayermy(); //[I-S]LN=32;[I-E]
    spawobjT(); //[I-S]LN=33;[I-E]
    processaChuck(1); //[I-S]LN=34;[I-E]
    removeChunck(); //[I-S]LN=35;[I-E]
  } //[I-S]LN=36;[I-E]
 //[I-S]LN=37;[I-E]
  private void posplayermy() { //[I-S]LN=38;[I-E]
    myposGlobal = myObject.getGlobalPosition(); //[I-S]LN=39;[I-E]
myposxs = (int) Math.floor(myposGlobal.getX() / width); //[I-S]LN=40;[I-E]
myposzs = (int) Math.floor(myposGlobal.getZ() / width); //[I-S]LN=41;[I-E]
  } //[I-S]LN=42;[I-E]
 //[I-S]LN=43;[I-E]
  private void spawobjT() { //[I-S]LN=44;[I-E]
    if (myposxs == lastChuckX && myposzs == lastChuckZ) return; //[I-S]LN=45;[I-E]
    lastChuckX = myposxs; //[I-S]LN=46;[I-E]
    lastChuckZ = myposzs; //[I-S]LN=47;[I-E]
    for (int x = (-chunks); x < (chunks); x++) { //[I-S]LN=48;[I-E]
      for (int z = (-chunks); z < (chunks); z++) { //[I-S]LN=49;[I-E]
        int px = x + myposxs; //[I-S]LN=50;[I-E]
        int pz = z + myposzs; //[I-S]LN=51;[I-E]
        long poskey = CodificKey(px, pz); //[I-S]LN=52;[I-E]
        if (chunck.containsKey(poskey)) continue; //[I-S]LN=53;[I-E]
        process.add(poskey); //[I-S]LN=54;[I-E]
      } //[I-S]LN=55;[I-E]
    } //[I-S]LN=56;[I-E]
  } //[I-S]LN=57;[I-E]
 //[I-S]LN=58;[I-E]
  private void processaChuck(int quant) { //[I-S]LN=59;[I-E]
    if (process.isEmpty()) return; //[I-S]LN=60;[I-E]
    for (int i = 0; i < quant; i++) { //[I-S]LN=61;[I-E]
      long poss = process.remove(); //[I-S]LN=62;[I-E]
      int px = (int) DescodificKeyX(poss); //[I-S]LN=63;[I-E]
      int pz = (int) DescodificKeyZ(poss); //[I-S]LN=64;[I-E]
      long poskey = CodificKey(px, pz); //[I-S]LN=65;[I-E]
      if (chunck.containsKey(poskey)) continue; //[I-S]LN=66;[I-E]
      // Vector2 pos = new Vector2(px * width, pz * width); //[I-S]LN=67;[I-E]
      SpatialObject TerrObj = object.TerrCriate(px * width, pz * width); //[I-S]LN=68;[I-E]
      if (TerrObj != null && TerrObj.exists()) chunck.put(poskey, TerrObj); //[I-S]LN=69;[I-E]
    } //[I-S]LN=70;[I-E]
  } //[I-S]LN=71;[I-E]
 //[I-S]LN=72;[I-E]
  private void removeChunck() { //[I-S]LN=73;[I-E]
    Iterator<Map.Entry<Long, SpatialObject>> item = chunck.entrySet().iterator(); //[I-S]LN=74;[I-E]
    while (item.hasNext()) { //[I-S]LN=75;[I-E]
      Map.Entry<Long, SpatialObject> entregrar = item.next(); //[I-S]LN=76;[I-E]
      int posChunckX = DescodificKeyX(entregrar.getKey()); //[I-S]LN=77;[I-E]
      int posChunckZ = DescodificKeyZ(entregrar.getKey()); //[I-S]LN=78;[I-E]
      int dX = Math.abs(posChunckX - myposxs); //[I-S]LN=79;[I-E]
      int dZ = Math.abs(posChunckZ - myposzs); //[I-S]LN=80;[I-E]
      if (dX > (chunks) || dZ > (chunks)) { //[I-S]LN=81;[I-E]
        entregrar.getValue().destroy(); //[I-S]LN=82;[I-E]
        item.remove(); //[I-S]LN=83;[I-E]
      } //[I-S]LN=84;[I-E]
    } //[I-S]LN=85;[I-E]
  } //[I-S]LN=86;[I-E]
 //[I-S]LN=87;[I-E]
  public long CodificKey(int x, int z) { //[I-S]LN=88;[I-E]
    return (((long) x) << 32) | (z & 0xFFFFFFFFL); //[I-S]LN=89;[I-E]
  } //[I-S]LN=90;[I-E]
 //[I-S]LN=91;[I-E]
  public int DescodificKeyX(long x) { //[I-S]LN=92;[I-E]
    return (int) (x >> 32); //[I-S]LN=93;[I-E]
  } //[I-S]LN=94;[I-E]
 //[I-S]LN=95;[I-E]
  public int DescodificKeyZ(long z) { //[I-S]LN=96;[I-E]
    return (int) z; //[I-S]LN=97;[I-E]
  } //[I-S]LN=98;[I-E]
} //[I-S]LN=99;[I-E]
//C-R:malha
class malha { //[I-S]LN=0;[I-E]
  private PerlinNoise perlin = new PerlinNoise(100); //[I-S]LN=1;[I-E]
 //[I-S]LN=2;[I-E]
  public void triangulo(int value, int[] triang) { //[I-S]LN=3;[I-E]
    int tris = 0, verts = 0; //[I-S]LN=4;[I-E]
    for (int z = 0; z < value; z++) { //[I-S]LN=5;[I-E]
      for (int x = 0; x < value; x++) { //[I-S]LN=6;[I-E]
        triang[tris + 0] = verts + 0; //[I-S]LN=7;[I-E]
        triang[tris + 1] = verts + value + 1; //[I-S]LN=8;[I-E]
        triang[tris + 2] = verts + 1; //[I-S]LN=9;[I-E]
        triang[tris + 3] = verts + 1; //[I-S]LN=10;[I-E]
        triang[tris + 4] = verts + value + 1; //[I-S]LN=11;[I-E]
        triang[tris + 5] = verts + value + 2; //[I-S]LN=12;[I-E]
        verts++; //[I-S]LN=13;[I-E]
        tris += 6; //[I-S]LN=14;[I-E]
      } //[I-S]LN=15;[I-E]
      verts++; //[I-S]LN=16;[I-E]
    } //[I-S]LN=17;[I-E]
  } //[I-S]LN=18;[I-E]
 //[I-S]LN=19;[I-E]
  public Vertex meshup(boolean onoff, ModelRenderer model, MaterialFile mateFile, int[] trianglo, List<Vector3> vertices, List<Vector3> normal, List<Vector2> uv) { //[I-S]LN=20;[I-E]
    Vertex vertexs = new Vertex(); //[I-S]LN=21;[I-E]
    vertexs.setVertices(vertices); //[I-S]LN=22;[I-E]
    vertexs.setNormals(normal); //[I-S]LN=23;[I-E]
    vertexs.setUVs(uv); //[I-S]LN=24;[I-E]
    vertexs.setTriangles(trianglo); //[I-S]LN=25;[I-E]
    vertexs.apply(); //[I-S]LN=26;[I-E]
     //[I-S]LN=27;[I-E]
    model.setMaterialFile(mateFile);    //[I-S]LN=28;[I-E]
    model.setVertex(vertexs);     //[I-S]LN=29;[I-E]
if (onoff) model.getMaterial().setReceiveLight(false); //[I-S]LN=30;[I-E]
    model.setCastShadowEnabled(false);    //[I-S]LN=31;[I-E]
    return vertexs; //[I-S]LN=32;[I-E]
  }  //[I-S]LN=33;[I-E]
 //[I-S]LN=34;[I-E]
  public float perlinnoises(chunkgen tama, SpatialObject myObj, float x, float z) { //[I-S]LN=35;[I-E]
    float calcu = 0; //[I-S]LN=36;[I-E]
    float pi = 22 / 7; //[I-S]LN=37;[I-E]
float valuex = (x + tama.seed) + myObj.getPosition().getX(); //[I-S]LN=38;[I-E]
float valuez = (z + tama.seed) + myObj.getPosition().getZ(); //[I-S]LN=39;[I-E]
    calcu += perlin.noise(valuex, valuez) * tama.heightscale; //[I-S]LN=40;[I-E]
    calcu += perlin.noise(valuex * pi, valuez * pi) * tama.heightscale * 0.5f; //[I-S]LN=41;[I-E]
    calcu += perlin.noise(valuex / pi, valuez / pi) * tama.heightscale / 0.5f; //[I-S]LN=42;[I-E]
    calcu += perlin.noise(valuex - pi, valuez - pi) * tama.heightscale - 0.1f; //[I-S]LN=43;[I-E]
    return calcu; //[I-S]LN=44;[I-E]
  } //[I-S]LN=45;[I-E]
} //[I-S]LN=46;[I-E]
//C-R:TerreController
class TerreController extends Component { //[I-S]LN=0;[I-E]
  private SpatialObject armLog, Obj, voi; //[I-S]LN=1;[I-E]
  private ModelRenderer TerrModelo; //[I-S]LN=2;[I-E]
  private Vertex TerrVertex; //[I-S]LN=3;[I-E]
  private List<Vector3> TerrVertices = new LinkedList<Vector3>(), TerrNormal = new LinkedList<Vector3>(); //[I-S]LN=4;[I-E]
  private List<Vector2> TerrUV = new LinkedList<Vector2>(); //[I-S]LN=5;[I-E]
  private int[] TerrTriangle; //[I-S]LN=6;[I-E]
  private PerlinNoise perlin = new PerlinNoise(100); //[I-S]LN=7;[I-E]
  private chunkgen tama; //[I-S]LN=8;[I-E]
  private Vector3 mypos; //[I-S]LN=9;[I-E]
  private HashMap<Long, Float> HeightMap = new HashMap<Long, Float>(); //[I-S]LN=10;[I-E]
  private int[][] block = null; //[I-S]LN=11;[I-E]
  private malha modela = new malha(); //[I-S]LN=12;[I-E]
 //[I-S]LN=13;[I-E]
public   void start() { //[I-S]LN=14;[I-E]
    if (!myObject.exists()) return; //[I-S]LN=15;[I-E]
    tama = WorldController.findObject("player").findComponent("chunkgen"); //[I-S]LN=16;[I-E]
    armLog = WorldController.findObject("log"); //[I-S]LN=17;[I-E]
    TerrModelo = myObject.findComponent("modelrenderer"); //[I-S]LN=18;[I-E]
    TerrVertex = new Vertex(); //[I-S]LN=19;[I-E]
    reload(); //[I-S]LN=20;[I-E]
    if (Obj == null || !Obj.exists()) return; //[I-S]LN=21;[I-E]
    Water gera = Obj.findComponent("Water"); //[I-S]LN=22;[I-E]
    gera.WaterGera(); //[I-S]LN=23;[I-E]
  } //[I-S]LN=24;[I-E]
 //[I-S]LN=25;[I-E]
  private void myposblock() { //[I-S]LN=26;[I-E]
mypos = myObject.getPosition(); //[I-S]LN=27;[I-E]
  } //[I-S]LN=28;[I-E]
 //[I-S]LN=29;[I-E]
  public void reload() { //[I-S]LN=30;[I-E]
    new AsyncTask( //[I-S]LN=31;[I-E]
        new AsyncRunnable() { //[I-S]LN=32;[I-E]
          public Object onBackground(Object input) { //[I-S]LN=33;[I-E]
            TerrVertex = new Vertex(); //[I-S]LN=34;[I-E]
            myposblock(); //[I-S]LN=35;[I-E]
            WaterCriate(); //[I-S]LN=36;[I-E]
            MatrizChunck(); //[I-S]LN=37;[I-E]
            generat(); //[I-S]LN=38;[I-E]
            return null; //[I-S]LN=39;[I-E]
          } //[I-S]LN=40;[I-E]
 //[I-S]LN=41;[I-E]
          public void onEngine(Object result) { //[I-S]LN=42;[I-E]
 //[I-S]LN=43;[I-E]
            if (myObject.exists()) return; //[I-S]LN=44;[I-E]
            HeightMap.clear(); //[I-S]LN=45;[I-E]
            TerrVertices.clear(); //[I-S]LN=46;[I-E]
            TerrNormal.clear(); //[I-S]LN=47;[I-E]
            TerrUV.clear(); //[I-S]LN=48;[I-E]
          } //[I-S]LN=49;[I-E]
        }); //[I-S]LN=50;[I-E]
  } //[I-S]LN=51;[I-E]
 //[I-S]LN=52;[I-E]
  private void MatrizChunck() { //[I-S]LN=53;[I-E]
    block = new int[tama.width + 1][tama.width + 1]; //[I-S]LN=54;[I-E]
    for (int z = 0; z <= tama.width; z++) { //[I-S]LN=55;[I-E]
      for (int x = 0; x <= tama.width; x++) { //[I-S]LN=56;[I-E]
        float y = modela.perlinnoises(tama, myObject, x, z); //[I-S]LN=57;[I-E]
if (y + mypos.getY() >= tama.waterlevel - 2 && y + mypos.getY() <= 2 + tama.waterlevel) block[z][x] = 1; //[I-S]LN=58;[I-E]
else if (y + mypos.getY() >= tama.waterlevel - 8 && y + mypos.getY() <= tama.waterlevel - 2) block[z][x] = 4; //[I-S]LN=59;[I-E]
else if (y + mypos.getY() <= tama.waterlevel - 8) block[z][x] = 5; //[I-S]LN=60;[I-E]
        else block[z][x] = 3; //[I-S]LN=61;[I-E]
      } //[I-S]LN=62;[I-E]
    } //[I-S]LN=63;[I-E]
  } //[I-S]LN=64;[I-E]
 //[I-S]LN=65;[I-E]
  private void generat() { //[I-S]LN=66;[I-E]
    TerrTriangle = new int[tama.width * tama.width * 6]; //[I-S]LN=67;[I-E]
    for (int z = 0; z <= tama.width; z++) { //[I-S]LN=68;[I-E]
      for (int x = 0; x <= tama.width; x++) { //[I-S]LN=69;[I-E]
        float y = modela.perlinnoises(tama, myObject, x, z); //[I-S]LN=70;[I-E]
long codekey = CodificKey((int) (x + mypos.getX()), (int) (z + mypos.getZ())); //[I-S]LN=71;[I-E]
HeightMap.put(codekey, y + mypos.getY()); //[I-S]LN=72;[I-E]
        topFace(x, y, z, block[z][x]); //[I-S]LN=73;[I-E]
        generationlog(x, y, z); //[I-S]LN=74;[I-E]
      } //[I-S]LN=75;[I-E]
    } //[I-S]LN=76;[I-E]
    modela.triangulo(tama.width, TerrTriangle); //[I-S]LN=77;[I-E]
    TerrVertex = modela.meshup(false, TerrModelo, tama.TerrMate, TerrTriangle, TerrVertices, TerrNormal, TerrUV); //[I-S]LN=78;[I-E]
  }  //[I-S]LN=79;[I-E]
 //[I-S]LN=80;[I-E]
  private void topFace(float x, float y, float z, int typeblock) { //[I-S]LN=81;[I-E]
    if (typeblock < 0) return; //[I-S]LN=82;[I-E]
    TerrVertices.add(new Vector3(x, y, z)); //[I-S]LN=83;[I-E]
    TerrNormal.add(new Vector3(0, 1, 0)); //[I-S]LN=84;[I-E]
    Vector2 uv = mapuv(typeblock); //[I-S]LN=85;[I-E]
TerrUV.add(new Vector2(uv.getX() / 2, uv.getY() / 2)); //[I-S]LN=86;[I-E]
  } //[I-S]LN=87;[I-E]
 //[I-S]LN=88;[I-E]
  private Vector2 mapuv(int type) { //[I-S]LN=89;[I-E]
    int t = 4; //[I-S]LN=90;[I-E]
    float tilasize = 1f / t; //[I-S]LN=91;[I-E]
    int tx = type % t; //[I-S]LN=92;[I-E]
    int tz = type / t; //[I-S]LN=93;[I-E]
    tz = (int) tilasize - 1 - tz; //[I-S]LN=94;[I-E]
    float u = tx * tilasize, v = tz * tilasize; //[I-S]LN=95;[I-E]
    return new Vector2(u, v); //[I-S]LN=96;[I-E]
  } //[I-S]LN=97;[I-E]
 //[I-S]LN=98;[I-E]
  public void WaterCriate() { //[I-S]LN=99;[I-E]
    Obj = new SpatialObject("Water"); //[I-S]LN=100;[I-E]
    //Obj.setParent(myObject); //[I-S]LN=101;[I-E]
    Obj.setStatic(true); //[I-S]LN=102;[I-E]
    Obj.addComponent(new ModelRenderer()); //[I-S]LN=103;[I-E]
    Obj.addComponent(new Water()); //[I-S]LN=104;[I-E]
  } //[I-S]LN=105;[I-E]
 //[I-S]LN=106;[I-E]
  private void generationlog(float x, float y, float z) { //[I-S]LN=107;[I-E]
float worldx = x + mypos.getX(); //[I-S]LN=108;[I-E]
float worldz = z + mypos.getZ(); //[I-S]LN=109;[I-E]
int chunkX = (int) myObject.getGlobalPosition().getX(); //[I-S]LN=110;[I-E]
int chunkZ = (int) myObject.getGlobalPosition().getZ(); //[I-S]LN=111;[I-E]
    if (worldx < chunkX || worldx >= chunkX + tama.width || worldx < chunkZ || worldz >= chunkZ + tama.width) return; //[I-S]LN=112;[I-E]
    int space = 4; //[I-S]LN=113;[I-E]
    if (((int) worldx % space != 0) || ((int) worldz % space != 0)) return; //[I-S]LN=114;[I-E]
    float addspaw = perlin.noise(worldx + tama.seed, worldz + tama.seed); //[I-S]LN=115;[I-E]
    addspaw -= perlin.noise(worldx * 50f + tama.seed, worldz * 50f + tama.seed); //[I-S]LN=116;[I-E]
    if (addspaw >= tama.valuelog && y > tama.waterlevel + tama.heightscale) { //[I-S]LN=117;[I-E]
      int quemspaw = Random.range(0, tama.trees.size() - 1); //[I-S]LN=118;[I-E]
Vector3 positobj = new Vector3(worldx, y + mypos.getY(), worldz).sub(myObject.getGlobalPosition()); //[I-S]LN=119;[I-E]
      SpatialObject log = myObject.instantiate(tama.trees.get((int) quemspaw), positobj); //[I-S]LN=120;[I-E]
      log.setParent(myObject); //[I-S]LN=121;[I-E]
    } //[I-S]LN=122;[I-E]
  } //[I-S]LN=123;[I-E]
 //[I-S]LN=124;[I-E]
  public float getHeight(float x, float z) { //[I-S]LN=125;[I-E]
    long codeKey = CodificKey((int) Math.floor(x), (int) Math.floor(z)); //[I-S]LN=126;[I-E]
    return HeightMap.getOrDefault(codeKey, 0f); //[I-S]LN=127;[I-E]
  } //[I-S]LN=128;[I-E]
 //[I-S]LN=129;[I-E]
  public long CodificKey(int x, int z) { //[I-S]LN=130;[I-E]
    return (((long) x) << 32) | (z & 0xFFFFFFFFL); //[I-S]LN=131;[I-E]
  } //[I-S]LN=132;[I-E]
} //[I-S]LN=133;[I-E]
//C-R:Water
class Water extends Component { //[I-S]LN=0;[I-E]
  private ModelRenderer WaterModelo; //[I-S]LN=1;[I-E]
  private Vertex WaterVertex; //[I-S]LN=2;[I-E]
  private List<Vector3> WaterVertices = new LinkedList<Vector3>(), WaterNormal = new LinkedList<Vector3>(); //[I-S]LN=3;[I-E]
  private List<Vector2> WaterUV = new LinkedList<Vector2>(); //[I-S]LN=4;[I-E]
  private int[] WaterTriangle; //[I-S]LN=5;[I-E]
  private chunkgen tama; //[I-S]LN=6;[I-E]
  private malha modela = new malha(); //[I-S]LN=7;[I-E]
 //[I-S]LN=8;[I-E]
public   void start() { //[I-S]LN=9;[I-E]
    if (!myObject.exists()) return; //[I-S]LN=10;[I-E]
    tama = WorldController.findObject("player").findComponent("chunkgen"); //[I-S]LN=11;[I-E]
    WaterModelo = myObject.findComponent("modelrenderer"); //[I-S]LN=12;[I-E]
    WaterVertex = new Vertex(); //[I-S]LN=13;[I-E]
    if (myObject.exists()) return; //[I-S]LN=14;[I-E]
    WaterVertices.clear(); //[I-S]LN=15;[I-E]
    WaterNormal.clear(); //[I-S]LN=16;[I-E]
    WaterUV.clear(); //[I-S]LN=17;[I-E]
  } //[I-S]LN=18;[I-E]
 //[I-S]LN=19;[I-E]
  public void WaterGera() { //[I-S]LN=20;[I-E]
    start(); //[I-S]LN=21;[I-E]
    for (int z = 0; z <= 4; z++) { //[I-S]LN=22;[I-E]
      for (int x = 0; x <= 4; x++) { //[I-S]LN=23;[I-E]
        WaterVertices.add(new Vector3(x * 4, tama.waterlevel, z * 4)); //[I-S]LN=24;[I-E]
        WaterNormal.add(new Vector3(0, 1, 0)); //[I-S]LN=25;[I-E]
        WaterUV.add(new Vector2(x,z)); //[I-S]LN=26;[I-E]
      } //[I-S]LN=27;[I-E]
    } //[I-S]LN=28;[I-E]
    WaterTriangle = new int[4 * 4 * 6]; //[I-S]LN=29;[I-E]
    modela.triangulo(4, WaterTriangle); //[I-S]LN=30;[I-E]
    WaterVertex =modela.meshup(false, WaterModelo, tama.WaterMate, WaterTriangle, WaterVertices, WaterNormal,WaterUV); //[I-S]LN=31;[I-E]
  } //[I-S]LN=32;[I-E]
} //[I-S]LN=33;[I-E]
//C-R:test

 //[I-S]LN=1;[I-E]
// Useful imports //[I-S]LN=2;[I-E]
 //[I-S]LN=4;[I-E]
/** @Author */ //[I-S]LN=5;[I-E]
class test extends MaterialShader { //[I-S]LN=6;[I-E]
  @Override //[I-S]LN=7;[I-E]
  public String getShaderName() { //[I-S]LN=8;[I-E]
    return "CustomShaders/test"; //[I-S]LN=9;[I-E]
  } //[I-S]LN=10;[I-E]
 //[I-S]LN=11;[I-E]
  @Override //[I-S]LN=12;[I-E]
  public float getMinimalSupportedOGL() { //[I-S]LN=13;[I-E]
    return MaterialShader.OGL3; //[I-S]LN=14;[I-E]
  } //[I-S]LN=15;[I-E]
 //[I-S]LN=16;[I-E]
  @Order(idx = -1) //[I-S]LN=17;[I-E]
  public Texture t; //[I-S]LN=18;[I-E]
 //[I-S]LN=19;[I-E]
  @Order(idx = 0) //[I-S]LN=20;[I-E]
  public Color cor = new Color(255, 255, 255); //[I-S]LN=21;[I-E]
 //[I-S]LN=22;[I-E]
  private Shader shade; //[I-S]LN=23;[I-E]
  @Order(idx = 1) //[I-S]LN=24;[I-E]
  public Vector2 mapUV = new Vector2(1, 1), tile = new Vector2(0, 0); //[I-S]LN=25;[I-E]
 //[I-S]LN=26;[I-E]
  @Override //[I-S]LN=27;[I-E]
public   void start() { //[I-S]LN=28;[I-E]
    Shader.Builder b = new Shader.Builder(); //[I-S]LN=29;[I-E]
    b.createProgram(); //[I-S]LN=30;[I-E]
    VertexShader vert = VertexShader.loadFile(this, "test"); //[I-S]LN=31;[I-E]
    b.setVertexCode(vert); //[I-S]LN=32;[I-E]
    FragmentShader fra = FragmentShader.loadFile(this, "test"); //[I-S]LN=33;[I-E]
    b.setFragmentCode(fra); //[I-S]LN=34;[I-E]
    b.compileVertex(); //[I-S]LN=35;[I-E]
    b.compileFragment(); //[I-S]LN=36;[I-E]
    shade = b.create(); //[I-S]LN=37;[I-E]
  } //[I-S]LN=38;[I-E]
 //[I-S]LN=39;[I-E]
  @Override //[I-S]LN=40;[I-E]
public   void render(OGLES ogles, Camera camera, MSRenderData renderData) { //[I-S]LN=41;[I-E]
    OGLES3 ogl = (OGLES3) ogles; //[I-S]LN=42;[I-E]
    ogl.withShader(shade); //[I-S]LN=43;[I-E]
    ogl.setIgnoreAttributeException(true); //[I-S]LN=44;[I-E]
 //[I-S]LN=45;[I-E]
    ogl.uniformMatrix4("viewMatrix", camera.getViewMatrix()); //[I-S]LN=46;[I-E]
    ogl.uniformMatrix4("projectionMatrix", camera.getProjectionMatrix()); //[I-S]LN=47;[I-E]
 //[I-S]LN=48;[I-E]
    ogl.uniformColor("diffuse", cor); //[I-S]LN=49;[I-E]
    ogl.uniformTexture("albedo", t != null ? t : Texture.white()); //[I-S]LN=50;[I-E]
    ogl.uniformVector2("mapuv", mapUV); //[I-S]LN=51;[I-E]
    ogl.uniformVector2("o_tile", tile); //[I-S]LN=52;[I-E]
 //[I-S]LN=53;[I-E]
    for (int i = 0; i < renderData.vertexCount(); i++) { //[I-S]LN=54;[I-E]
      RenderableVertex rvert = renderData.renderableVertexAt(i); //[I-S]LN=55;[I-E]
Vertex vertex = rvert.getVertex(); //[I-S]LN=56;[I-E]
 //[I-S]LN=57;[I-E]
      if (vertex.getVerticesBuffer() != null) ogl.attributeVector3("position", vertex.getVerticesBuffer()); //[I-S]LN=58;[I-E]
      if (vertex.getUVsBuffer() != null) ogl.attributeVector2("texCoord", vertex.getUVsBuffer()); //[I-S]LN=59;[I-E]
 //[I-S]LN=60;[I-E]
      for (int j = 0; j < rvert.objectCount(); j++) { //[I-S]LN=61;[I-E]
        RenderableObject rObj = rvert.objectAt(j); //[I-S]LN=62;[I-E]
        if (!rObj.isVisibleByCamera()) continue; //[I-S]LN=63;[I-E]
        if (rObj.getRenderMatrix() != null) ogl.uniformMatrix4("modelMatrix", rObj.getRenderMatrix()); //[I-S]LN=64;[I-E]
        ogl.drawTriangles(vertex.getTrianglesBuffer()); //[I-S]LN=65;[I-E]
      } //[I-S]LN=66;[I-E]
    }  //[I-S]LN=67;[I-E]
    ogl.releaseAttributes(); //[I-S]LN=68;[I-E]
    ogl.releaseShader(); //[I-S]LN=69;[I-E]
  } //[I-S]LN=70;[I-E]
} //[I-S]LN=71;[I-E]
//C-R:terreno

 //[I-S]LN=1;[I-E]
// Useful imports //[I-S]LN=2;[I-E]
 //[I-S]LN=4;[I-E]
/** @Author */ //[I-S]LN=5;[I-E]
class terreno extends MaterialShader { //[I-S]LN=6;[I-E]
 //[I-S]LN=7;[I-E]
  /// Define shader configs //[I-S]LN=8;[I-E]
  @Override //[I-S]LN=9;[I-E]
  public String getShaderName() { //[I-S]LN=10;[I-E]
    return "CustomShaders/terreno"; //[I-S]LN=11;[I-E]
  } //[I-S]LN=12;[I-E]
 //[I-S]LN=13;[I-E]
  @Override //[I-S]LN=14;[I-E]
  public float getMinimalSupportedOGL() { //[I-S]LN=15;[I-E]
    return MaterialShader.OGL3; //[I-S]LN=16;[I-E]
  }  //[I-S]LN=17;[I-E]
 //[I-S]LN=18;[I-E]
  public Color cor = new Color().WHITE(); //[I-S]LN=19;[I-E]
  public Texture img1, noise; //[I-S]LN=20;[I-E]
  private float time = 0; //[I-S]LN=21;[I-E]
  private Shader shader; //[I-S]LN=22;[I-E]
 //[I-S]LN=23;[I-E]
  @Override //[I-S]LN=24;[I-E]
public   void start() { //[I-S]LN=25;[I-E]
    Shader.Builder sh = new Shader.Builder(); //[I-S]LN=26;[I-E]
    sh.createProgram(); //[I-S]LN=27;[I-E]
    VertexShader v = VertexShader.loadFile(this, "water"); //[I-S]LN=28;[I-E]
    sh.setVertexCode(v); //[I-S]LN=29;[I-E]
    FragmentShader f = FragmentShader.loadFile(this, "Grass"); //[I-S]LN=30;[I-E]
    sh.setFragmentCode(f); //[I-S]LN=31;[I-E]
    sh.compileVertex(); //[I-S]LN=32;[I-E]
    sh.compileFragment(); //[I-S]LN=33;[I-E]
 //[I-S]LN=34;[I-E]
    shader = sh.create(); //[I-S]LN=35;[I-E]
  } //[I-S]LN=36;[I-E]
 //[I-S]LN=37;[I-E]
  @Override //[I-S]LN=38;[I-E]
public   void render(OGLES ogles, Camera camera, MSRenderData renderData) { //[I-S]LN=39;[I-E]
    OGLES3 ogl = (OGLES3) ogles; //[I-S]LN=40;[I-E]
    ogl.withShader(shader); //[I-S]LN=41;[I-E]
    ogl.setIgnoreAttributeException(true); //[I-S]LN=42;[I-E]
 //[I-S]LN=43;[I-E]
    ogl.uniformMatrix4("viewMatrix", camera.getViewMatrix()); //[I-S]LN=44;[I-E]
    ogl.uniformMatrix4("projectionMatrix", camera.getProjectionMatrix()); //[I-S]LN=45;[I-E]
    ogl.uniformColor("diffuse", cor); //[I-S]LN=46;[I-E]
    time += 0.01f; //[I-S]LN=47;[I-E]
    ogl.uniformFloat("time",time); //[I-S]LN=48;[I-E]
     //[I-S]LN=49;[I-E]
    ogl.uniformTexture("water", img1 != null ? img1 : img1.white()); //[I-S]LN=50;[I-E]
    ogl.uniformTexture("texnoise", noise != null ? noise : noise.white()); //[I-S]LN=51;[I-E]
 //[I-S]LN=52;[I-E]
    for (int i = 0; i < renderData.vertexCount(); i++) { //[I-S]LN=53;[I-E]
      RenderableVertex rvert = renderData.renderableVertexAt(i); //[I-S]LN=54;[I-E]
Vertex vertex = rvert.getVertex(); //[I-S]LN=55;[I-E]
 //[I-S]LN=56;[I-E]
      if (vertex.getVerticesBuffer() != null) ogl.attributeVector3("position", vertex.getVerticesBuffer()); //[I-S]LN=57;[I-E]
      if (vertex.getUVsBuffer() != null) ogl.attributeVector2("texCoord", vertex.getUVsBuffer()); //[I-S]LN=58;[I-E]
 //[I-S]LN=59;[I-E]
      for (int j = 0; j < rvert.objectCount(); j++) { //[I-S]LN=60;[I-E]
        RenderableObject rObj = rvert.objectAt(j); //[I-S]LN=61;[I-E]
        if (!rObj.isVisibleByCamera()) continue; //[I-S]LN=62;[I-E]
        if (rObj.getRenderMatrix() != null) ogl.uniformMatrix4("modelMatrix", rObj.getRenderMatrix()); //[I-S]LN=63;[I-E]
        ogl.drawTriangles(vertex.getTrianglesBuffer()); //[I-S]LN=64;[I-E]
      } //[I-S]LN=65;[I-E]
    } //[I-S]LN=66;[I-E]
    ogl.releaseAttributes(); //[I-S]LN=67;[I-E]
    ogl.releaseShader(); //[I-S]LN=68;[I-E]
  } //[I-S]LN=69;[I-E]
} //[I-S]LN=70;[I-E]
//C-R:phisics
class phisics extends Component { //[I-S]LN=0;[I-E]
  private float gravity = 5f; //[I-S]LN=1;[I-E]
  private Vector3 velocity; //[I-S]LN=2;[I-E]
  private float collider = 1f; //[I-S]LN=3;[I-E]
  private float eixoX, eixoZ; //[I-S]LN=4;[I-E]
 //[I-S]LN=5;[I-E]
public   void start() { //[I-S]LN=6;[I-E]
    velocity = new Vector3(); //[I-S]LN=7;[I-E]
  } //[I-S]LN=8;[I-E]
 //[I-S]LN=9;[I-E]
public   void repeat() { //[I-S]LN=10;[I-E]
Vector3 pos = myObject.getPosition(); //[I-S]LN=11;[I-E]
    float delta = Time.deltaTime(); //[I-S]LN=12;[I-E]
    velocity.setY(velocity.getY() + (-gravity * delta)); //[I-S]LN=13;[I-E]
 //[I-S]LN=14;[I-E]
float blockInsite = getBlock(pos.getX(), pos.getZ()); //[I-S]LN=15;[I-E]
float blockAltura = getBlock(pos.getX() + velocity.getX() * delta, pos.getZ() * velocity.getZ() * delta); //[I-S]LN=16;[I-E]
    float checkAlto = Math.abs(blockAltura - blockInsite); //[I-S]LN=17;[I-E]
    float mult = 5f; //[I-S]LN=18;[I-E]
    //Console.log("abs: "+ checkAlto); //[I-S]LN=19;[I-E]
     if (checkAlto >20f ) mult = 5f; //[I-S]LN=20;[I-E]
     else if (checkAlto > 6f) mult = 2.5f; //[I-S]LN=21;[I-E]
    eixoX = mult; //[I-S]LN=22;[I-E]
    eixoZ = mult; //[I-S]LN=23;[I-E]
 //[I-S]LN=24;[I-E]
    float altura = blockInsite + collider; //[I-S]LN=25;[I-E]
float posmy = pos.getY() + velocity.getY() * delta; //[I-S]LN=26;[I-E]
if (posmy <= altura && velocity.getY() < 0) { //[I-S]LN=27;[I-E]
      pos.setY(Math.lerpInSeconds(pos.getY(), altura, 4f)); //[I-S]LN=28;[I-E]
      velocity.setY(0); //[I-S]LN=29;[I-E]
    }  //[I-S]LN=30;[I-E]
pos.set(pos.getX() + velocity.getX() * delta, pos.getY() + velocity.getY() * delta, pos.getZ() + velocity.getZ() * delta); //[I-S]LN=31;[I-E]
  } //[I-S]LN=32;[I-E]
 //[I-S]LN=33;[I-E]
  public float moveX() { //[I-S]LN=34;[I-E]
    return eixoX; //[I-S]LN=35;[I-E]
  } //[I-S]LN=36;[I-E]
 //[I-S]LN=37;[I-E]
  public float moveZ() { //[I-S]LN=38;[I-E]
    return eixoZ; //[I-S]LN=39;[I-E]
  } //[I-S]LN=40;[I-E]
 //[I-S]LN=41;[I-E]
  public float getBlock(float x, float z) { //[I-S]LN=42;[I-E]
    TerreController terreno = getTerreno(x, z); //[I-S]LN=43;[I-E]
    if (terreno == null) return 0f; //[I-S]LN=44;[I-E]
    return terreno.getHeight(x, z); //[I-S]LN=45;[I-E]
  } //[I-S]LN=46;[I-E]
 //[I-S]LN=47;[I-E]
  public TerreController getTerreno(float x, float z) { //[I-S]LN=48;[I-E]
    chunkgen chunck = (chunkgen) myObject.findComponent("chunkgen"); //[I-S]LN=49;[I-E]
    if (chunck == null) return null; //[I-S]LN=50;[I-E]
    int coodX = (int) Math.floor(x / chunck.width); //[I-S]LN=51;[I-E]
    int coodZ = (int) Math.floor(z / chunck.width); //[I-S]LN=52;[I-E]
    long codekey = chunck.CodificKey(coodX, coodZ); //[I-S]LN=53;[I-E]
    SpatialObject ObjChunck = chunck.chunck.get(codekey); //[I-S]LN=54;[I-E]
    if (ObjChunck == null || !ObjChunck.exists()) return null; //[I-S]LN=55;[I-E]
    return (TerreController) ObjChunck.findComponent("TerreController"); //[I-S]LN=56;[I-E]
  } //[I-S]LN=57;[I-E]
} //[I-S]LN=58;[I-E]