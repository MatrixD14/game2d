package JAVARuntime;

import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import java.util.zip.*;
import java.text.*;
import java.net.*;
import java.math.*;
import java.io.*;
import java.nio.*;
import java.time.*;
import java.time.chrono.*;
import java.time.format.*;
import java.time.temporal.*;
import java.time.zone.*;



public class _JContainer{}

//C-R:gitTest
class gitTest extends Component { //[I-S]LN=0;[I-E]
  public String linkNamePasth;  //[I-S]LN=1;[I-E]
  public String pasth;  //[I-S]LN=2;[I-E]
  public String Commit = "comito";  //[I-S]LN=3;[I-E]
  public String toke; //[I-S]LN=4;[I-E]
 //[I-S]LN=5;[I-E]
  private String Dir; //[I-S]LN=6;[I-E]
 //[I-S]LN=7;[I-E]
  //@Order(idx = 0) //[I-S]LN=8;[I-E]
  public PropertiesButton DownLoad = //[I-S]LN=9;[I-E]
      new PropertiesButton( //[I-S]LN=10;[I-E]
          new PropertiesButtonListener() { //[I-S]LN=11;[I-E]
public             void onClicked() { //[I-S]LN=12;[I-E]
              DownLoad(); //[I-S]LN=13;[I-E]
            } //[I-S]LN=14;[I-E]
          }); //[I-S]LN=15;[I-E]
 //[I-S]LN=16;[I-E]
  public PropertiesButton UpLoad = //[I-S]LN=17;[I-E]
      new PropertiesButton( //[I-S]LN=18;[I-E]
          new PropertiesButtonListener() { //[I-S]LN=19;[I-E]
public             void onClicked() { //[I-S]LN=20;[I-E]
              UpLoad(); //[I-S]LN=21;[I-E]
            } //[I-S]LN=22;[I-E]
          }); //[I-S]LN=23;[I-E]
 //[I-S]LN=24;[I-E]
  public void DownLoad() { //[I-S]LN=25;[I-E]
    if (pasth == null || pasth.isEmpty() || !pasth.contains(".") || !linkNamePasth.contains("/") || linkNamePasth.isEmpty()) return; //[I-S]LN=26;[I-E]
     //[I-S]LN=27;[I-E]
    Dir = Directories.getProjectFolder() + "/Files/" + pasth; //[I-S]LN=28;[I-E]
    String DownloadUrl = "https://raw.githubusercontent.com/" + linkNamePasth + "/main/Files/" + pasth; //[I-S]LN=29;[I-E]
    GitClone(DownloadUrl, Dir); //[I-S]LN=30;[I-E]
 //[I-S]LN=31;[I-E]
    String InforDate = "{\n \"pasth\": \"" + Dir + "\",\n \"NameFile\": \"" + pasth + "\",\n \"Link\": \"" + DownloadUrl + "\"\n}"; //[I-S]LN=32;[I-E]
    Console.log(InforDate); //[I-S]LN=33;[I-E]
  } //[I-S]LN=34;[I-E]
 //[I-S]LN=35;[I-E]
  public void UpLoad() { //[I-S]LN=36;[I-E]
    if (pasth == null || pasth.isEmpty() || !pasth.contains(".") || !linkNamePasth.contains("/") || linkNamePasth.isEmpty() || toke == null || toke.length() < 20) return; //[I-S]LN=37;[I-E]
     //[I-S]LN=38;[I-E]
    Dir = Directories.getProjectFolder() + "/Files/" + pasth; //[I-S]LN=39;[I-E]
    String API_Url = "https://api.github.com/repos/" + linkNamePasth + "/contents/Files/" + pasth + "?ref=main"; //[I-S]LN=40;[I-E]
 //[I-S]LN=41;[I-E]
    // busca o sha do file //[I-S]LN=42;[I-E]
 //[I-S]LN=43;[I-E]
    String shas = getSha(API_Url, toke); //[I-S]LN=44;[I-E]
    GitPush(API_Url, Commit, Dir, toke, shas); //[I-S]LN=45;[I-E]
 //[I-S]LN=46;[I-E]
    Console.log(!shas.isEmpty() ? "update" : "create"); //[I-S]LN=47;[I-E]
    Console.log("Link: " + API_Url); //[I-S]LN=48;[I-E]
  }  //[I-S]LN=49;[I-E]
 //[I-S]LN=50;[I-E]
  public void GitClone(String link, String path) { //[I-S]LN=51;[I-E]
    try { //[I-S]LN=52;[I-E]
      URL url = new URL(link); //[I-S]LN=53;[I-E]
      InputStream in = url.openStream(); //[I-S]LN=54;[I-E]
      BufferedInputStream bs = new BufferedInputStream(in); //[I-S]LN=55;[I-E]
      FileOutputStream fs = new FileOutputStream(path); //[I-S]LN=56;[I-E]
      byte[] date = new byte[1024]; //[I-S]LN=57;[I-E]
      int count; //[I-S]LN=58;[I-E]
      while ((count = bs.read(date, 0, 1024)) != -1) { //[I-S]LN=59;[I-E]
        fs.write(date, 0, count); //[I-S]LN=60;[I-E]
      } //[I-S]LN=61;[I-E]
      fs.flush(); //[I-S]LN=62;[I-E]
      fs.close(); //[I-S]LN=63;[I-E]
      bs.close(); //[I-S]LN=64;[I-E]
      in.close(); //[I-S]LN=65;[I-E]
    } catch (Exception e) { //[I-S]LN=66;[I-E]
      Console.log(e); //[I-S]LN=67;[I-E]
    } //[I-S]LN=68;[I-E]
  } //[I-S]LN=69;[I-E]
 //[I-S]LN=70;[I-E]
  public void GitPush(String link, String menssage, String pasth, String token, String sha) { //[I-S]LN=71;[I-E]
    try { //[I-S]LN=72;[I-E]
      byte[] date = readFile(pasth); //[I-S]LN=73;[I-E]
      String encode = Base64.getEncoder().encodeToString(date); //[I-S]LN=74;[I-E]
 //[I-S]LN=75;[I-E]
      // json que sera enviado para api.github //[I-S]LN=76;[I-E]
 //[I-S]LN=77;[I-E]
      String json = "{\n  \"message\": \"" + menssage + "\",\n  \"content\": \"" + encode + "\",\n  \"branch\": \"main\"" + (sha != null && !sha.isEmpty() ? ",\n  \"sha\": \"" + sha + "\"" : "") + "\n}"; //[I-S]LN=78;[I-E]
      Console.log(json); //[I-S]LN=79;[I-E]
 //[I-S]LN=80;[I-E]
      URL url = new URL(link); //[I-S]LN=81;[I-E]
 //[I-S]LN=82;[I-E]
      // connect com o github //[I-S]LN=83;[I-E]
 //[I-S]LN=84;[I-E]
      HttpURLConnection com = (HttpURLConnection) url.openConnection(); //[I-S]LN=85;[I-E]
      com.setRequestMethod("PUT"); //[I-S]LN=86;[I-E]
      com.setDoOutput(true); //[I-S]LN=87;[I-E]
      com.setRequestProperty("Authorization", "token " + token); //[I-S]LN=88;[I-E]
      com.setRequestProperty("Content-Type", "application/json"); //[I-S]LN=89;[I-E]
 //[I-S]LN=90;[I-E]
      OutputStream output = com.getOutputStream(); //[I-S]LN=91;[I-E]
      output.write(json.getBytes("UTF-8")); //[I-S]LN=92;[I-E]
      output.flush(); //[I-S]LN=93;[I-E]
      output.close(); //[I-S]LN=94;[I-E]
 //[I-S]LN=95;[I-E]
      /// vierifica se teve algum erro ao conectar como github //[I-S]LN=96;[I-E]
 //[I-S]LN=97;[I-E]
      int menss = com.getResponseCode(); //[I-S]LN=98;[I-E]
      Console.log(menss == 201 || menss == 200 ? "file enviado sucess" : "erro em algum folder"); //[I-S]LN=99;[I-E]
 //[I-S]LN=100;[I-E]
      InputStream input = (menss >= 400) ? com.getErrorStream() : com.getInputStream(); //[I-S]LN=101;[I-E]
      BufferedReader reader = new BufferedReader(new InputStreamReader(input)); //[I-S]LN=102;[I-E]
      StringBuilder result = new StringBuilder(); //[I-S]LN=103;[I-E]
      String line; //[I-S]LN=104;[I-E]
      while ((line = reader.readLine()) != null) result.append(line); //[I-S]LN=105;[I-E]
      Console.log("\nreposta: " + result.toString()); //[I-S]LN=106;[I-E]
      input.close(); //[I-S]LN=107;[I-E]
    } catch (Exception e) { //[I-S]LN=108;[I-E]
      Console.log(e); //[I-S]LN=109;[I-E]
    } //[I-S]LN=110;[I-E]
  } //[I-S]LN=111;[I-E]
 //[I-S]LN=112;[I-E]
  /// função que ve o tamanho do file que sera enviado para git para não manda faltando em byte //[I-S]LN=113;[I-E]
 //[I-S]LN=114;[I-E]
  public byte[] readFile(String pasth) { //[I-S]LN=115;[I-E]
    try { //[I-S]LN=116;[I-E]
      FileInputStream fs = new FileInputStream(pasth); //[I-S]LN=117;[I-E]
      ByteArrayOutputStream buffer = new ByteArrayOutputStream(); //[I-S]LN=118;[I-E]
      byte[] date = new byte[1024]; //[I-S]LN=119;[I-E]
      int read; //[I-S]LN=120;[I-E]
      while ((read = fs.read(date)) != -1) buffer.write(date, 0, read); //[I-S]LN=121;[I-E]
      fs.close(); //[I-S]LN=122;[I-E]
      return buffer.toByteArray(); //[I-S]LN=123;[I-E]
    } catch (Exception e) { //[I-S]LN=124;[I-E]
      Console.log(e); //[I-S]LN=125;[I-E]
    } //[I-S]LN=126;[I-E]
    return null; //[I-S]LN=127;[I-E]
  } //[I-S]LN=128;[I-E]
 //[I-S]LN=129;[I-E]
  /// funcão vai busca no json da api.github onde esta o "sha" do file existe no github //[I-S]LN=130;[I-E]
 //[I-S]LN=131;[I-E]
  public String getSha(String link, String token) { //[I-S]LN=132;[I-E]
    try { //[I-S]LN=133;[I-E]
      URL url = new URL(link); //[I-S]LN=134;[I-E]
 //[I-S]LN=135;[I-E]
      HttpURLConnection com = (HttpURLConnection) url.openConnection(); //[I-S]LN=136;[I-E]
      com.setRequestMethod("GET"); //[I-S]LN=137;[I-E]
      com.setRequestProperty("Authorization", "token " + token); //[I-S]LN=138;[I-E]
      com.setRequestProperty("Accept", "application/vnd.github.v3+json"); //[I-S]LN=139;[I-E]
 //[I-S]LN=140;[I-E]
      int menss = com.getResponseCode(); //[I-S]LN=141;[I-E]
      InputStream input = (menss >= 400) ? com.getErrorStream() : com.getInputStream(); //[I-S]LN=142;[I-E]
      BufferedReader reader = new BufferedReader(new InputStreamReader(input)); //[I-S]LN=143;[I-E]
      StringBuilder result = new StringBuilder(); //[I-S]LN=144;[I-E]
      String line; //[I-S]LN=145;[I-E]
      while ((line = reader.readLine()) != null) result.append(line); //[I-S]LN=146;[I-E]
 //[I-S]LN=147;[I-E]
      GitJson json = (GitJson) Json.fromJson(result.toString(), GitJson.class, true); //[I-S]LN=148;[I-E]
 //[I-S]LN=149;[I-E]
      if (json != null && json.sha != null) return json.sha; //[I-S]LN=150;[I-E]
      else Console.log("falho o sha"); //[I-S]LN=151;[I-E]
      input.close(); //[I-S]LN=152;[I-E]
    } catch (Exception e) { //[I-S]LN=153;[I-E]
      Console.log(e); //[I-S]LN=154;[I-E]
    } //[I-S]LN=155;[I-E]
    return ""; //[I-S]LN=156;[I-E]
  } //[I-S]LN=157;[I-E]
 //[I-S]LN=158;[I-E]
  public class GitJson { //[I-S]LN=159;[I-E]
    public String sha; //[I-S]LN=160;[I-E]
  } //[I-S]LN=161;[I-E]
} //[I-S]LN=162;[I-E]
//C-R:testjava
class testjava extends Component { //[I-S]LN=0;[I-E]
  public ObjectFile inimigo; //[I-S]LN=1;[I-E]
  private float time = 0; //[I-S]LN=2;[I-E]
  public List<SpatialObject> inimig = new LinkedList<SpatialObject>(); //[I-S]LN=3;[I-E]
  private int totalinimigo = 5, cont = 1; //[I-S]LN=4;[I-E]
  private menu stop; //[I-S]LN=5;[I-E]
public   void start(){ //[I-S]LN=6;[I-E]
       //[I-S]LN=7;[I-E]
  } //[I-S]LN=8;[I-E]
public   void repeat() { //[I-S]LN=9;[I-E]
     // if(stop.OpenPosh) return; //[I-S]LN=10;[I-E]
    if (time < 1) time += 0.01f; //[I-S]LN=11;[I-E]
    spaw(); //[I-S]LN=12;[I-E]
  } //[I-S]LN=13;[I-E]
 //[I-S]LN=14;[I-E]
  private void spaw() { //[I-S]LN=15;[I-E]
    SpatialObject spawI; //[I-S]LN=16;[I-E]
    if (inimig.size() < totalinimigo) { //[I-S]LN=17;[I-E]
      if (time > 0.25f && cont <100) { //[I-S]LN=18;[I-E]
        spawI = myObject.instantiate(inimigo, new Vector3(-8, Random.range(-2.12f, 2.12f), 3.80f)); //[I-S]LN=19;[I-E]
       // moveI destroy = new moveI(this, spawI); //[I-S]LN=20;[I-E]
        //spawI.addComponent(destroy); //[I-S]LN=21;[I-E]
        spawI.setName("inimig" + cont++); //[I-S]LN=22;[I-E]
        inimig.add(spawI); //[I-S]LN=23;[I-E]
        time=0; //[I-S]LN=24;[I-E]
      } //[I-S]LN=25;[I-E]
    }  //[I-S]LN=26;[I-E]
  } //[I-S]LN=27;[I-E]
 //[I-S]LN=28;[I-E]
  public class moveI extends Component { //[I-S]LN=29;[I-E]
    private float speed = 0.1f, time; //[I-S]LN=30;[I-E]
    private spaw list; //[I-S]LN=31;[I-E]
    private SpatialObject my; //[I-S]LN=32;[I-E]
    private menu stop; //[I-S]LN=33;[I-E]
    public moveI(spaw list, SpatialObject my) { //[I-S]LN=34;[I-E]
      this.list = list; //[I-S]LN=35;[I-E]
      this.my = my; //[I-S]LN=36;[I-E]
    } //[I-S]LN=37;[I-E]
public     void start(){ //[I-S]LN=38;[I-E]
        stop = WorldController.findObject("cenario").findComponent("menu"); //[I-S]LN=39;[I-E]
    } //[I-S]LN=40;[I-E]
public     void repeat() { //[I-S]LN=41;[I-E]
      //if (!my.exists() || stop.OpenPosh) return; //[I-S]LN=42;[I-E]
      if (time < 2) time += 0.01f; //[I-S]LN=43;[I-E]
      if (time > 1.5f) { //[I-S]LN=44;[I-E]
        list.inimig.remove(my); //[I-S]LN=45;[I-E]
        if (my.exists()) my.destroy(); //[I-S]LN=46;[I-E]
        return; //[I-S]LN=47;[I-E]
      } //[I-S]LN=48;[I-E]
      move(); //[I-S]LN=49;[I-E]
    } //[I-S]LN=50;[I-E]
 //[I-S]LN=51;[I-E]
    private void move() { //[I-S]LN=52;[I-E]
      myObject.translate(speed, 0, 0); //[I-S]LN=53;[I-E]
    } //[I-S]LN=54;[I-E]
  } //[I-S]LN=55;[I-E]
} //[I-S]LN=56;[I-E]
//C-R:moveP
class moveP extends Component { //[I-S]LN=0;[I-E]
  private Vector2 slid = null; //[I-S]LN=1;[I-E]
  private menu stop; //[I-S]LN=2;[I-E]
public   void start() { //[I-S]LN=3;[I-E]
    slid = Input.getAxisValue("move"); //[I-S]LN=4;[I-E]
    stop = WorldController.findObject("cenario").findComponent("menu"); //[I-S]LN=5;[I-E]
  } //[I-S]LN=6;[I-E]
 //[I-S]LN=7;[I-E]
public   void repeat() { //[I-S]LN=8;[I-E]
     // if(stop.OpenPosh) return; //[I-S]LN=9;[I-E]
    moveObj(); //[I-S]LN=10;[I-E]
  } //[I-S]LN=11;[I-E]
 //[I-S]LN=12;[I-E]
  private void moveObj() { //[I-S]LN=13;[I-E]
Vector3 mypos = myObject.getPosition(); //[I-S]LN=14;[I-E]
myObject.getPosition().setY(mypos.getY() > 2.12f ? 2.12f : mypos.getY() < -2.12f ? -2.12f : mypos.getY()); //[I-S]LN=15;[I-E]
myObject.translate(0, -(slid.getY() / 100), 0); //[I-S]LN=16;[I-E]
  }  //[I-S]LN=17;[I-E]
} //[I-S]LN=18;[I-E]
//C-R:atiraP
class atiraP extends Component { //[I-S]LN=0;[I-E]
  private float time = 0; //[I-S]LN=1;[I-E]
  private SUIRect scale = new SUIRect(); //[I-S]LN=2;[I-E]
  public ObjectFile hole; //[I-S]LN=3;[I-E]
  private List<SpatialObject> balas = new LinkedList<SpatialObject>(); //[I-S]LN=4;[I-E]
  private SpatialObject shot; //[I-S]LN=5;[I-E]
  //private menu stop; //[I-S]LN=6;[I-E]
 //[I-S]LN=7;[I-E]
public   void start() { //[I-S]LN=8;[I-E]
    balas.clear(); //[I-S]LN=9;[I-E]
    //stop = WorldController.findObject("cenario").findComponent("menu"); //[I-S]LN=10;[I-E]
    scale = WorldController.findObject("atira").findComponent("suirect"); //[I-S]LN=11;[I-E]
    shot = WorldController.findObject("shot"); //[I-S]LN=12;[I-E]
    dupbala(); //[I-S]LN=13;[I-E]
  }  //[I-S]LN=14;[I-E]
 //[I-S]LN=15;[I-E]
public   void repeat() { //[I-S]LN=16;[I-E]
   // if (stop.OpenPosh) return; //[I-S]LN=17;[I-E]
    if (time < 1) time += 0.01f; //[I-S]LN=18;[I-E]
    atira(); //[I-S]LN=19;[I-E]
  } //[I-S]LN=20;[I-E]
 //[I-S]LN=21;[I-E]
  private void atira() { //[I-S]LN=22;[I-E]
    if (Input.isKeyDown("atira") || Input.keyboard.isKeyDown("space")) { //[I-S]LN=23;[I-E]
      scale.setInt("Height", 160); //[I-S]LN=24;[I-E]
      if (time > 0.02f) { //[I-S]LN=25;[I-E]
        reloardBalaActive(); //[I-S]LN=26;[I-E]
        time = 0; //[I-S]LN=27;[I-E]
      } //[I-S]LN=28;[I-E]
    } else scale.setInt("Height", 150); //[I-S]LN=29;[I-E]
  } //[I-S]LN=30;[I-E]
 //[I-S]LN=31;[I-E]
  private void dupbala() { //[I-S]LN=32;[I-E]
    SpatialObject bala; //[I-S]LN=33;[I-E]
    for (int value = 1; value < 12; ++value) { //[I-S]LN=34;[I-E]
      bala = myObject.instantiate(hole); //[I-S]LN=35;[I-E]
      bala.addComponent(new moves()); //[I-S]LN=36;[I-E]
      bala.setName("bala" + value); //[I-S]LN=37;[I-E]
      bala.setEnabled(false); //[I-S]LN=38;[I-E]
      balas.add(bala); //[I-S]LN=39;[I-E]
    } //[I-S]LN=40;[I-E]
  } //[I-S]LN=41;[I-E]
 //[I-S]LN=42;[I-E]
  private void reloardBalaActive() { //[I-S]LN=43;[I-E]
    SpatialObject bala; //[I-S]LN=44;[I-E]
    boolean onoff = false; //[I-S]LN=45;[I-E]
    for (int list = 0; list < balas.size(); ++list) { //[I-S]LN=46;[I-E]
      if (!onoff) { //[I-S]LN=47;[I-E]
        bala = balas.get(list); //[I-S]LN=48;[I-E]
        if (!bala.isEnabled()) { //[I-S]LN=49;[I-E]
          bala.setEnabled(true); //[I-S]LN=50;[I-E]
          bala.setPosition(shot.getGlobalPosition()); //[I-S]LN=51;[I-E]
          onoff = true; //[I-S]LN=52;[I-E]
          break; //[I-S]LN=53;[I-E]
        } //[I-S]LN=54;[I-E]
      } //[I-S]LN=55;[I-E]
    } //[I-S]LN=56;[I-E]
    if (!onoff) { //[I-S]LN=57;[I-E]
      bala = balas.get(0); //[I-S]LN=58;[I-E]
      bala.setPosition(shot.getGlobalPosition()); //[I-S]LN=59;[I-E]
      bala.setEnabled(true); //[I-S]LN=60;[I-E]
    } //[I-S]LN=61;[I-E]
  } //[I-S]LN=62;[I-E]
 //[I-S]LN=63;[I-E]
  public class moves extends Component { //[I-S]LN=64;[I-E]
    private float speed = 10, time = 0; //[I-S]LN=65;[I-E]
 //[I-S]LN=66;[I-E]
public     void repeat() { //[I-S]LN=67;[I-E]
      if (time < 1) time += 0.01f; //[I-S]LN=68;[I-E]
      if (time > 0.3f) { //[I-S]LN=69;[I-E]
        myObject.setEnabled(false); //[I-S]LN=70;[I-E]
        time = 0; //[I-S]LN=71;[I-E]
      } //[I-S]LN=72;[I-E]
      mov(); //[I-S]LN=73;[I-E]
    } //[I-S]LN=74;[I-E]
 //[I-S]LN=75;[I-E]
    public void mov() { //[I-S]LN=76;[I-E]
      myObject.moveInSeconds(-speed, 0, 0); //[I-S]LN=77;[I-E]
    } //[I-S]LN=78;[I-E]
  } //[I-S]LN=79;[I-E]
} //[I-S]LN=80;[I-E]
//C-R:menu
class menu extends Component { //[I-S]LN=0;[I-E]
public   void start() { //[I-S]LN=1;[I-E]
    Console.log("hello World"); //[I-S]LN=2;[I-E]
  }  //[I-S]LN=3;[I-E]
} //[I-S]LN=4;[I-E]
//C-R:spaw
class spaw extends Component { //[I-S]LN=0;[I-E]
  public ObjectFile inimigo; //[I-S]LN=1;[I-E]
  private float time = 0; //[I-S]LN=2;[I-E]
  public List<SpatialObject> inimig = new LinkedList<SpatialObject>(); //[I-S]LN=3;[I-E]
  private int totalinimigo = 5, cont = 1; //[I-S]LN=4;[I-E]
  //private menu stop; //[I-S]LN=5;[I-E]
public   void start(){ //[I-S]LN=6;[I-E]
     // stop = WorldController.findObject("cenario").findComponent("menu"); //[I-S]LN=7;[I-E]
  } //[I-S]LN=8;[I-E]
public   void repeat() { //[I-S]LN=9;[I-E]
      //if(stop.OpenPosh) return; //[I-S]LN=10;[I-E]
    if (time < 1) time += 0.01f; //[I-S]LN=11;[I-E]
    spaw(); //[I-S]LN=12;[I-E]
  } //[I-S]LN=13;[I-E]
 //[I-S]LN=14;[I-E]
  private void spaw() { //[I-S]LN=15;[I-E]
    SpatialObject spawI; //[I-S]LN=16;[I-E]
    if (inimig.size() < totalinimigo) { //[I-S]LN=17;[I-E]
      if (time > 0.25f && cont <100) { //[I-S]LN=18;[I-E]
        spawI = myObject.instantiate(inimigo, new Vector3(-8, Random.range(-2.12f, 2.12f), 3.80f)); //[I-S]LN=19;[I-E]
        moveI destroy = new moveI(this, spawI); //[I-S]LN=20;[I-E]
        spawI.addComponent(destroy); //[I-S]LN=21;[I-E]
        spawI.setName("inimig" + cont++); //[I-S]LN=22;[I-E]
        inimig.add(spawI); //[I-S]LN=23;[I-E]
        time=0; //[I-S]LN=24;[I-E]
      } //[I-S]LN=25;[I-E]
    }  //[I-S]LN=26;[I-E]
  } //[I-S]LN=27;[I-E]
 //[I-S]LN=28;[I-E]
  public class moveI extends Component { //[I-S]LN=29;[I-E]
    private float speed = 0.1f, time; //[I-S]LN=30;[I-E]
    private spaw list; //[I-S]LN=31;[I-E]
    private SpatialObject my; //[I-S]LN=32;[I-E]
    //private menu stop; //[I-S]LN=33;[I-E]
    public moveI(spaw list, SpatialObject my) { //[I-S]LN=34;[I-E]
      this.list = list; //[I-S]LN=35;[I-E]
      this.my = my; //[I-S]LN=36;[I-E]
    } //[I-S]LN=37;[I-E]
public     void start(){ //[I-S]LN=38;[I-E]
       // stop = WorldController.findObject("cenario").findComponent("menu"); //[I-S]LN=39;[I-E]
    } //[I-S]LN=40;[I-E]
public     void repeat() { //[I-S]LN=41;[I-E]
      //if (!my.exists() || stop.OpenPosh) return; //[I-S]LN=42;[I-E]
      if (time < 2) time += 0.01f; //[I-S]LN=43;[I-E]
      if (time > 1.5f) { //[I-S]LN=44;[I-E]
        list.inimig.remove(my); //[I-S]LN=45;[I-E]
        if (my.exists()) my.destroy(); //[I-S]LN=46;[I-E]
        return; //[I-S]LN=47;[I-E]
      } //[I-S]LN=48;[I-E]
      move(); //[I-S]LN=49;[I-E]
    } //[I-S]LN=50;[I-E]
 //[I-S]LN=51;[I-E]
    private void move() { //[I-S]LN=52;[I-E]
      myObject.translate(speed, 0, 0); //[I-S]LN=53;[I-E]
    } //[I-S]LN=54;[I-E]
  } //[I-S]LN=55;[I-E]
} //[I-S]LN=56;[I-E]